buildscript {
    repositories {
    	mavenCentral()
	    maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
		maven { setUrl("https://repo.spring.io/milestone") }
	}
}

plugins {
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'java'
	id 'com.vaadin'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'checkstyle'
	id 'jacoco'
}

group = 'org.apolenkov.application'
version = '1.0-SNAPSHOT'
description = 'flashcards'

java {
	sourceCompatibility = '21'
	targetCompatibility = '21'
}

repositories {
	mavenCentral()
	maven { setUrl("https://maven.vaadin.com/vaadin-prereleases") }
	maven { setUrl("https://repo.spring.io/milestone") }
	maven { setUrl("https://maven.vaadin.com/vaadin-addons") }
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	// Vaadin dependencies
	implementation('com.vaadin:vaadin')
	implementation('com.vaadin:vaadin-spring-boot-starter')
	implementation('org.parttio:line-awesome:2.1.0')

	// Spring Boot starters
// 	implementation('org.springframework.boot:spring-boot-starter-security')
// 	implementation('org.springframework.boot:spring-boot-starter-oauth2-client')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-validation')

	// Database
	runtimeOnly('org.postgresql:postgresql')

	// Development tools
	developmentOnly('org.springframework.boot:spring-boot-devtools')

	// Testing
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('com.vaadin:vaadin-testbench-junit5')
}

dependencyManagement {
	imports {
		mavenBom "com.vaadin:vaadin-bom:$vaadinVersion"
	}
}

// Production profile equivalent
if (project.hasProperty('production')) {
	configurations.all {
		exclude group: 'com.vaadin', module: 'vaadin-dev'
	}
}

// Default goal equivalent for Gradle
defaultTasks 'bootRun'

// Code quality: Spotless, Checkstyle, Jacoco
spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat('1.17.0')
        // Organize imports and trim
        importOrder 'java', 'javax', 'jakarta', 'org', 'com', ''
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

checkstyle {
    toolVersion = '10.16.0'
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

jacoco {
    toolVersion = '0.8.12'
}

tasks.test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

jacocoTestCoverageVerification {
    dependsOn(tasks.test)
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
}

tasks.check {
    dependsOn(tasks.spotlessCheck)
    dependsOn(tasks.jacocoTestCoverageVerification)
}