---
name: Pull Request Validation

on:
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]
# Allow only one concurrent PR validation per PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  # Build Configuration
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
  TESTCONTAINERS_REUSE_ENABLE: "true"

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Linters and static analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle

      - name: Run code quality checks
        uses: ./.github/actions/code-quality
        with:
          gradle-opts: ${{ env.GRADLE_OPTS }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8 # Unit test execution

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle

      - name: Run unit tests
        uses: ./.github/actions/run-unit-tests
        with:
          gradle-opts: ${{ env.GRADLE_OPTS }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12 # TestContainers + integration tests

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle

      - name: Run integration tests
        uses: ./.github/actions/run-integration-tests
        with:
          gradle-opts: ${{ env.GRADLE_OPTS }}
          testcontainers-reuse: ${{ env.TESTCONTAINERS_REUSE_ENABLE }}

  # Check if Ansible files were changed in this PR
  check-ansible-changes:
    name: Check Ansible Changes
    runs-on: ubuntu-latest
    outputs:
      ansible_changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if Ansible files modified
        id: check
        run: |
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          if echo "$CHANGED_FILES" | grep -q "^ansible/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Ansible files were modified - will run quality checks"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "⏭️  No Ansible files changed - skipping validation"
          fi

  # Reuse the full ansible-lint.yml workflow (DRY principle!)
  ansible-validation:
    name: Ansible Quality Checks
    needs: check-ansible-changes
    if: needs.check-ansible-changes.outputs.ansible_changed == 'true'
    uses: ./.github/workflows/ansible-lint.yml
