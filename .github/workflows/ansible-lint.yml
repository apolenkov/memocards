name: Ansible Lint and Syntax Check

on:
  workflow_dispatch:  # Manual trigger
  workflow_call:  # Called from main.yml (tags) and pr.yml
    secrets:
      ANSIBLE_VAULT_PASSWORD:
        required: false
        description: 'Ansible Vault password for decrypting secrets.yml'

jobs:
  ansible-lint:
    name: Ansible Syntax Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    env:
      # Make secret available as env var for consistent access in both direct and workflow_call modes
      VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'
      
      - name: Install Ansible and dependencies
        run: |
          cd ansible
          pip install -r requirements.txt
      
      - name: Cache Ansible collections
        uses: actions/cache@v4
        with:
          path: ~/.ansible/collections
          key: ${{ runner.os }}-ansible-collections-${{ hashFiles('ansible/requirements.yml') }}
          restore-keys: |
            ${{ runner.os }}-ansible-collections-
      
      - name: Install Ansible collections
        run: |
          cd ansible
          ansible-galaxy collection install -r requirements.yml
      
      - name: Debug - Check vault password availability
        run: |
          if [ -n "$VAULT_PASSWORD" ]; then
            echo "✅ VAULT_PASSWORD is available (length: ${#VAULT_PASSWORD} chars)"
          else
            echo "⚠️  VAULT_PASSWORD is NOT set or empty"
          fi
          echo "Workflow trigger: ${{ github.event_name }}"
      
      - name: Create vault password file
        run: |
          # Create vault password file if secret is provided
          # Use VAULT_PASSWORD env var for consistent access in both direct and workflow_call modes
          if [ -n "$VAULT_PASSWORD" ]; then
            echo "$VAULT_PASSWORD" > /tmp/vault_pass.txt
            chmod 600 /tmp/vault_pass.txt
            echo "VAULT_FILE=/tmp/vault_pass.txt" >> $GITHUB_ENV
            echo "✅ Vault password file created"
          else
            echo "::warning::ANSIBLE_VAULT_PASSWORD secret is not set. Will use dummy secrets for syntax check."
            echo "VAULT_FILE=" >> $GITHUB_ENV
          fi

      - name: Run ansible-playbook syntax check
        run: |
          cd ansible
          for playbook in playbooks/*.yml; do
            echo "Checking $playbook..."
            if [ -n "$VAULT_FILE" ]; then
              ansible-playbook --syntax-check "$playbook" --vault-password-file "$VAULT_FILE"
            else
              # Try without vault password (will fail if vault is required)
              ansible-playbook --syntax-check "$playbook" || {
                echo "::warning::Syntax check failed. This might be due to missing ANSIBLE_VAULT_PASSWORD secret."
                exit 1
              }
            fi
          done

      - name: Cleanup vault password file
        if: always()
        run: |
          if [ -f /tmp/vault_pass.txt ]; then
            shred -u /tmp/vault_pass.txt || rm -f /tmp/vault_pass.txt
          fi
      
      - name: Run ansible-lint (optional)
        continue-on-error: true
        run: |
          cd ansible
          if command -v ansible-lint &> /dev/null; then
            for playbook in playbooks/*.yml; do
              echo "Linting $playbook..."
              ansible-lint "$playbook" || true
            done
          else
            echo "::notice::ansible-lint not available, skipping"
          fi
