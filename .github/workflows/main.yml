---
name: Main Branch Deployment

on:
  push:
    branches: [master]
  workflow_dispatch:
# Prevent concurrent runs on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Build Configuration
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
  TESTCONTAINERS_REUSE_ENABLE: "true"

  # Docker Registry
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

  # Artifact retention (days)
  ARTIFACT_RETENTION_DAYS: 90

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Linters and static analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle

      - name: Run code quality checks
        uses: ./.github/actions/code-quality
        with:
          gradle-opts: ${{ env.GRADLE_OPTS }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8 # Unit test execution

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle

      - name: Run unit tests
        uses: ./.github/actions/run-unit-tests
        with:
          gradle-opts: ${{ env.GRADLE_OPTS }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12 # TestContainers + integration tests

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle

      - name: Run integration tests
        uses: ./.github/actions/run-integration-tests
        with:
          gradle-opts: ${{ env.GRADLE_OPTS }}
          testcontainers-reuse: ${{ env.TESTCONTAINERS_REUSE_ENABLE }}
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Jib build and push to registry
    needs: [code-quality, unit-tests, integration-tests]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract version from build.gradle.kts
        id: version
        run: |
          VERSION=$(grep -m 1 'version = ' build.gradle.kts | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Project Version: $VERSION"
          echo "🏷️  Git SHA: ${{ github.sha }}"

      - name: Build and push Docker image with Jib
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "🏗️  Building Docker image with multiple tags..."
          ./gradlew jib \
            -PGITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -PGITHUB_ACTOR="${{ github.actor }}" \
            -PGITHUB_REPOSITORY="${{ github.repository }}" \
            -PGITHUB_SHA="${{ github.sha }}"

          echo "✅ Image pushed successfully!"
          echo "📦 Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷️  Tags:"
          echo "   - latest"
          echo "   - ${{ steps.version.outputs.version }}"
          echo "   - ${GITHUB_SHA:0:7}"

      - name: Extract image digest
        id: digest
        run: |
          if [ -f build/jib-image.digest ]; then
            DIGEST=$(cat build/jib-image.digest)
            echo "digest=$DIGEST" >> $GITHUB_OUTPUT
            echo "📋 Image digest: $DIGEST"
          else
            echo "⚠️  Warning: jib-image.digest not found"
          fi

      - name: Generate artifact attestation
        if: steps.digest.outputs.digest != '' && github.event.repository.visibility == 'public'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

      - name: Upload image metadata
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-metadata
          path: |
            build/jib-image.digest
            build/jib-image.id
            build/jib-image.json
          retention-days: 90

      - name: Create deployment summary
        run: |
          echo "## 🐳 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security:**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.repository.visibility }}" == "public" ]; then
            echo "- ✅ Artifact attestation generated (SLSA provenance)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Supply chain transparency enabled" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ℹ️ Artifact attestation skipped (only available for public repositories)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Image signed and pushed to registry" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Commands:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
