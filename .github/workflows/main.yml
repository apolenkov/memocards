name: Main Branch Deployment

on:
  push:
    branches: [master]
  workflow_dispatch:

# Prevent concurrent runs on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
  TESTCONTAINERS_REUSE_ENABLE: "true"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Run Spotless check
        run: ./gradlew spotlessCheck
        
      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
        
      - name: Run SpotBugs
        run: ./gradlew spotbugsMain spotbugsTest
        
      - name: Run SonarLint
        run: ./gradlew sonarlintMain sonarlintTest
        
      - name: Run CSS linting
        run: ./gradlew lintCss

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle
            
      - name: Run unit tests (excluding integration tests)
        run: ./gradlew test -x integrationTest
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            build/test-results/test/
            build/reports/tests/test/
          retention-days: 90
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: build/reports/jacoco/test/html/
          retention-days: 90

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    
    services:
      docker:
        image: docker:dind
        options: --privileged
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle
            
      - name: Run integration tests with TestContainers
        run: ./gradlew integrationTest
        
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            build/test-results/integrationTest/
            build/reports/tests/integrationTest/
          retention-days: 90

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, unit-tests, integration-tests]
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Gradle environment
        uses: ./.github/actions/setup-gradle
      
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Extract version from build.gradle.kts
        id: version
        run: |
          VERSION=$(grep -m 1 'version = ' build.gradle.kts | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Project Version: $VERSION"
          echo "🏷️  Git SHA: ${{ github.sha }}"
          
      - name: Build and push Docker image with Jib
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "🏗️  Building Docker image with multiple tags..."
          ./gradlew jib \
            -PGITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -PGITHUB_ACTOR="${{ github.actor }}" \
            -PGITHUB_REPOSITORY="${{ github.repository }}" \
            -PGITHUB_SHA="${{ github.sha }}"
          
          echo "✅ Image pushed successfully!"
          echo "📦 Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷️  Tags:"
          echo "   - latest"
          echo "   - ${{ steps.version.outputs.version }}"
          echo "   - ${GITHUB_SHA:0:7}"
            
      - name: Upload image metadata
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-metadata
          path: |
            build/jib-image.digest
            build/jib-image.id
            build/jib-image.json
          retention-days: 90
          
      - name: Create deployment summary
        run: |
          echo "## 🐳 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Available Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Commands:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
