name: Main Branch Deployment

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
  TESTCONTAINERS_REUSE_ENABLE: "true"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: false
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Run Spotless check
        run: ./gradlew spotlessCheck
        
      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest
        
      - name: Run SpotBugs
        run: ./gradlew spotbugsMain spotbugsTest
        
      - name: Run SonarLint
        run: ./gradlew sonarlintMain sonarlintTest
        
      - name: Run CSS linting
        run: ./gradlew lintCss

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: false
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Run unit tests (excluding integration tests)
        run: ./gradlew test -x integrationTest
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            build/test-results/test/
            build/reports/tests/test/
          retention-days: 90
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: build/reports/jacoco/test/html/
          retention-days: 90

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 12
    
    services:
      docker:
        image: docker:dind
        options: --privileged
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: false
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Run integration tests with TestContainers
        run: ./gradlew integrationTest
        
      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            build/test-results/integrationTest/
            build/reports/tests/integrationTest/
          retention-days: 90

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, unit-tests, integration-tests]
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: false
          
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image with Jib
        run: |
          ./gradlew jib \
            -PGITHUB_TOKEN="${{ secrets.GHCR_TOKEN }}" \
            -PGITHUB_ACTOR="${{ github.actor }}" \
            -PGITHUB_REPOSITORY="${{ github.repository }}" \
            -PGITHUB_SHA="${{ github.sha }}"
            
      - name: Upload image metadata
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-metadata
          path: |
            build/jib-image.digest
            build/jib-image.id
            build/jib-image.json
          retention-days: 90

  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [docker-build]
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
          
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --detach
          
      - name: Wait for deployment
        run: |
          echo "Waiting for Railway deployment to complete..."
          sleep 30
          
      - name: Health check
        run: |
          # Get Railway service URL (this would need to be configured based on your Railway setup)
          echo "Deployment completed. Check Railway dashboard for service URL."
