name: Deploy to VPS

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      image_tag:
        description: 'Docker image tag to deploy (leave empty for latest)'
        required: false
        default: ''
        type: string
  
  # Automatic trigger on push to master
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: 'wrapper'

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Build with Gradle
        run: ./gradlew clean build -x test
      
      - name: Extract version from build.gradle.kts
        id: version
        run: |
          VERSION=$(grep -m 1 'version = ' build.gradle.kts | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/memocards
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-
            type=ref,event=branch
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image with Jib
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "🏗️  Building Docker image with multiple tags..."
          ./gradlew jib \
            -PGITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" \
            -PGITHUB_ACTOR="${{ github.actor }}" \
            -PGITHUB_REPOSITORY="${{ github.repository }}" \
            -PGITHUB_SHA="${{ github.sha }}"
          
          echo "✅ Image pushed successfully!"
          echo "📦 Repository: ghcr.io/${{ github.repository_owner }}/memocards"
          echo "🏷️  Tags:"
          echo "   - latest"
          echo "   - ${{ steps.version.outputs.version }}"
          echo "   - ${GITHUB_SHA:0:7}"
      
      - name: Save image tags for deployment
        id: image_tags
        run: |
          echo "latest=ghcr.io/${{ github.repository_owner }}/memocards:latest" >> $GITHUB_OUTPUT
          echo "version=ghcr.io/${{ github.repository_owner }}/memocards:${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "sha=ghcr.io/${{ github.repository_owner }}/memocards:${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to VPS with Ansible
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine image tag for deployment
        id: deploy_tag
        run: |
          if [ -n "${{ inputs.image_tag }}" ]; then
            TAG="${{ inputs.image_tag }}"
            echo "Using manual tag: $TAG"
          else
            TAG="${GITHUB_SHA:0:7}"
            echo "Using git SHA tag: $TAG"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "full_image=ghcr.io/${{ github.repository_owner }}/memocards:$TAG" >> $GITHUB_OUTPUT
          
          echo "## 🚀 Deployment Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`ghcr.io/${{ github.repository_owner }}/memocards:$TAG\`" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** \`${{ inputs.environment || 'production' }}\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Ansible and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          ansible-galaxy collection install community.docker
      
      - name: Create Ansible Vault password file
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > .vault_pass
          chmod 600 .vault_pass
      
      - name: Create SSH key file (if using SSH key)
        if: ${{ secrets.VPS_SSH_KEY != '' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Test Ansible connectivity
        working-directory: ./ansible
        run: |
          ansible -i inventory/hosts.yml vps -m ping --vault-password-file ../.vault_pass
      
      - name: Deploy application with Ansible
        working-directory: ./ansible
        env:
          DEPLOY_IMAGE_TAG: ${{ steps.deploy_tag.outputs.tag }}
        run: |
          echo "🚀 Deploying image: ${{ steps.deploy_tag.outputs.full_image }}"
          ansible-playbook \
            -i inventory/hosts.yml \
            playbooks/deploy.yml \
            --vault-password-file ../.vault_pass \
            --extra-vars "app_image=${{ steps.deploy_tag.outputs.full_image }}" \
            -v
      
      - name: Verify deployment
        run: |
          echo "⏳ Waiting for application to be ready..."
          sleep 30
          
          # Check if application is responding
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://memocards.duckdns.org/actuator/health || echo "000")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Deployment successful! Application is healthy."
          else
            echo "⚠️ Warning: Application returned HTTP $HTTP_STATUS"
            echo "This might be normal if the application is still starting up."
          fi
      
      - name: Clean up
        if: always()
        run: |
          rm -f .vault_pass
          rm -f ~/.ssh/id_rsa
      
      - name: Deployment summary
        run: |
          echo "╔════════════════════════════════════════════════════════════╗"
          echo "║      🚀 Deployment Completed!                             ║"
          echo "╚════════════════════════════════════════════════════════════╝"
          echo ""
          echo "📦 Image: ${{ steps.deploy_tag.outputs.full_image }}"
          echo "🏷️  Tag: ${{ steps.deploy_tag.outputs.tag }}"
          echo "🏷️  Commit: ${{ github.sha }}"
          echo "🌐 URL: https://memocards.duckdns.org"
          echo "💚 Health: https://memocards.duckdns.org/actuator/health"
          echo ""
          echo "📋 Next steps:"
          echo "  - Verify application: curl -I https://memocards.duckdns.org"
          echo "  - Check logs: ssh root@185.239.48.254 'docker logs -f memocards-app-prod'"
          echo ""
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status:** Completed" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Image:** \`${{ steps.deploy_tag.outputs.full_image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **URL:** [memocards.duckdns.org](https://memocards.duckdns.org)" >> $GITHUB_STEP_SUMMARY
          echo "💚 **Health:** [/actuator/health](https://memocards.duckdns.org/actuator/health)" >> $GITHUB_STEP_SUMMARY

