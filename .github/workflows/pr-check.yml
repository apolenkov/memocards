name: Pull Request Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '21'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false
  TESTCONTAINERS_RYUK_DISABLED: true

jobs:
  quality-check:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: memocards
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check code formatting with Spotless
        run: ./gradlew spotlessCheck
        continue-on-error: false

      - name: Run code quality checks
        run: ./gradlew codeQualityFull

      - name: Run unit and integration tests
        env:
          DB_URL: jdbc:postgresql://localhost:5432/memocards
          DB_USER: test
          DB_PASSWORD: test
        run: ./gradlew test

      - name: Generate JaCoCo coverage report
        if: always()
        run: ./gradlew jacocoTestReport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/tests/
            build/test-results/

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: build/reports/jacoco/

      - name: Comment PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testResults = 'âœ… Tests passed successfully!';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Test Results\n\n${testResults}\n\n**Workflow:** ${{ github.workflow }}\n**Run:** ${{ github.run_id }}`
            });

