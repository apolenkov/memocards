---
# Infrastructure monitoring services (Prometheus, Loki, Promtail, Grafana, Traefik)
# NOTE: Requires docker-compose.yml to be started first to create the network
# Usage: docker compose -f docker-compose.infrastructure.yml up -d

services:
  traefik:
    image: traefik:v3.0
    container_name: ${TRAEFIK_CONTAINER_NAME:-memocards-traefik}
    ports:
      # Main entrypoint for Nginx proxy (all traffic from Nginx goes here)
      - "127.0.0.1:8080:8080"
      # Dashboard API entrypoint (for direct localhost access)
      - "127.0.0.1:8081:8082"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./infrastructure/traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./infrastructure/traefik/dynamic:/etc/traefik/dynamic
      # ACME volume not needed - Nginx handles SSL certificates
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128m
        reservations:
          memory: 64m
    networks:
      - memocards-network
    labels:
      # Traefik dashboard accessible via /traefik/ path
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`memocards.duckdns.org`) && (PathPrefix(`/traefik`) || PathPrefix(`/api`))"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.priority=10"
      - "traefik.http.services.traefik.loadbalancer.server.port=8082"
      - "traefik.http.middlewares.traefik-stripprefix.stripprefix.prefixes=/traefik"
      - "traefik.http.routers.traefik.middlewares=traefik-stripprefix"
      # Redirect common typo /traefic -> /traefik/
      - "traefik.http.middlewares.traefic-redirect.redirectregex.regex=^/traefic/?(.*)"
      - "traefik.http.middlewares.traefic-redirect.redirectregex.replacement=/traefik/$1"
      - "traefik.http.routers.traefic-redirect.rule=PathPrefix(`/traefic`)"
      - "traefik.http.routers.traefic-redirect.entrypoints=web"
      - "traefik.http.routers.traefic-redirect.priority=20"
      - "traefik.http.routers.traefic-redirect.middlewares=traefic-redirect"
      - "traefik.http.routers.traefic-redirect.service=traefik"

  prometheus:
    image: prom/prometheus:latest
    container_name: ${PROMETHEUS_CONTAINER_NAME:-memocards-prometheus}
    ports:
      - "127.0.0.1:${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=https://memocards.duckdns.org/prometheus/'
      - '--web.route-prefix=/prometheus/'
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9090/prometheus/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
    networks:
      - memocards-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`memocards.duckdns.org`) && PathPrefix(`/prometheus`)"
      - "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.routers.prometheus.priority=10"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  loki:
    image: grafana/loki:latest
    container_name: ${LOKI_CONTAINER_NAME:-memocards-loki}
    ports:
      - "127.0.0.1:${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/loki.yml
    volumes:
      - loki_data:/loki
      - ./infrastructure/loki/loki.yml:/etc/loki/loki.yml
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 192m
        reservations:
          memory: 96m
    networks:
      - memocards-network
    environment:
      - JAEGER_AGENT_HOST=localhost

  promtail:
    image: grafana/promtail:latest
    container_name: ${PROMTAIL_CONTAINER_NAME:-memocards-promtail}
    volumes:
      - ${APP_LOGS_PATH:-./logs}:/var/log/app:ro
      - ./infrastructure/promtail:/etc/promtail
      - promtail_positions:/var/lib/promtail
    command: -config.file=/etc/promtail/promtail.yml
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9080/metrics || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 96m
        reservations:
          memory: 48m
    networks:
      - memocards-network
    depends_on:
      loki:
        condition: service_healthy

  grafana:
    image: grafana/grafana:latest
    container_name: ${GRAFANA_CONTAINER_NAME:-memocards-grafana}
    ports:
      - "127.0.0.1:${GRAFANA_PORT:-3000}:3000"
    env_file:
      - .env
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-https://memocards.duckdns.org/grafana/}
      GF_SERVER_PROTOCOL: http
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/grafana/config/grafana.ini:/etc/grafana/grafana.ini
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 192m
        reservations:
          memory: 96m
    networks:
      - memocards-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`memocards.duckdns.org`) && PathPrefix(`/grafana`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.routers.grafana.priority=10"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local
  promtail_positions:
    driver: local
  # traefik_acme removed - Nginx handles SSL on host

networks:
  memocards-network:
    external: true

