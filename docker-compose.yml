---
# Application services (PostgreSQL + App)
# This compose file creates the 'memocards-network' that infrastructure uses
# Usage: docker compose up -d

services:
  postgres:
    image: postgres:16-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-memocards-postgres}
    environment:
      POSTGRES_DB: ${DB_NAME:-memocards}
      POSTGRES_USER: ${DB_USER:-memocards_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-memocards_user} -d ${DB_NAME:-memocards}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: ${POSTGRES_HEALTHCHECK_START:-30s}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-512m}
        reservations:
          memory: ${POSTGRES_MEMORY_RESERVATION:-256m}
    networks:
      - memocards-network

  app:
    image: ${APP_IMAGE:-ghcr.io/apolenkov/memocards:latest}
    # Container name: use APP_CONTAINER_NAME for production, omit for development
    # Omitting allows Docker Compose to auto-generate names (project_app_1)
    # This enables running multiple versions simultaneously
    container_name: ${APP_CONTAINER_NAME}
    env_file:
      - .env
    environment:
      # Override Vaadin settings for containers
      VAADIN_LAUNCH_BROWSER: false
      VAADIN_PRODUCTION_MODE: true
      # Override database URL for Docker networking
      DB_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-memocards}
    volumes:
      - ${APP_LOGS_PATH:-./logs}:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    # No external port publication for 8080: served via Traefik on the same Docker network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: ${APP_HEALTHCHECK_START:-60s}
    deploy:
      resources:
        limits:
          memory: ${APP_MEMORY_LIMIT:-1500m}
        reservations:
          memory: ${APP_MEMORY_RESERVATION:-512m}
    networks:
      - memocards-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`memocards.duckdns.org`) && !PathPrefix(`/grafana`) && !PathPrefix(`/prometheus`) && !PathPrefix(`/traefik`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=8080"
      - "traefik.http.routers.app.priority=1"

volumes:
  postgres_data:
    driver: local

networks:
  memocards-network:
    name: memocards-network
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
    # Note: This network is created by docker-compose.yml first
    # It's used as external by docker-compose.infrastructure.yml
