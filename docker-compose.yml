---
services:
  postgres:
    image: postgres:16-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-memocards-postgres}
    environment:
      POSTGRES_DB: ${DB_NAME:-memocards}
      POSTGRES_USER: ${DB_USER:-memocards_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---auth-host=scram-sha-256}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-memocards_user} -d ${DB_NAME:-memocards}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: ${POSTGRES_HEALTHCHECK_START:-30s}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-512m}
        reservations:
          memory: ${POSTGRES_MEMORY_RESERVATION:-256m}
    networks:
      - ${NETWORK_NAME:-memocards-network}

  app:
    image: ${APP_IMAGE:-ghcr.io/apolenkov/memocards:latest}
    # Container name: use APP_CONTAINER_NAME for production, omit for development
    # Omitting allows Docker Compose to auto-generate names (project_app_1)
    # This enables running multiple versions simultaneously
    container_name: ${APP_CONTAINER_NAME}
    ports:
      - "${APP_PORT:-8080}:8080"
    env_file:
      - .env
    environment:
      # Override Vaadin settings for containers
      VAADIN_LAUNCH_BROWSER: false
      VAADIN_PRODUCTION_MODE: true
      # Override database URL for Docker networking
      DB_URL: jdbc:postgresql://postgres:5432/${DB_NAME:-memocards}
    volumes:
      - ${APP_LOGS_PATH:-./logs}:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: ${APP_HEALTHCHECK_START:-60s}
    deploy:
      resources:
        limits:
          memory: ${APP_MEMORY_LIMIT:-1500m}
        reservations:
          memory: ${APP_MEMORY_RESERVATION:-512m}
    networks:
      - ${NETWORK_NAME:-memocards-network}

  prometheus:
    image: prom/prometheus:latest
    container_name: ${PROMETHEUS_CONTAINER_NAME:-memocards-prometheus}
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
    networks:
      - ${NETWORK_NAME:-memocards-network}

  loki:
    image: grafana/loki:latest
    container_name: ${LOKI_CONTAINER_NAME:-memocards-loki}
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 192m
        reservations:
          memory: 96m
    networks:
      - ${NETWORK_NAME:-memocards-network}
    environment:
      - JAEGER_AGENT_HOST=localhost

  promtail:
    image: grafana/promtail:latest
    container_name: ${PROMTAIL_CONTAINER_NAME:-memocards-promtail}
    volumes:
      - ${APP_LOGS_PATH:-./logs}:/var/log/app:ro
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 96m
        reservations:
          memory: 48m
    networks:
      - ${NETWORK_NAME:-memocards-network}
    depends_on:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: ${GRAFANA_CONTAINER_NAME:-memocards-grafana}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 192m
        reservations:
          memory: 96m
    networks:
      - ${NETWORK_NAME:-memocards-network}

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local

networks:
  memocards-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
