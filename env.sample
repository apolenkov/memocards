# =============================================================================
# MEMO CARDS - Environment Variables Sample
# =============================================================================
# Copy this file to .env and adjust values for your environment
# All values shown here are DEFAULTS from application.yml

# =============================================================================
# DOCKER COMPOSE CONFIGURATION
# =============================================================================
# Container names
# - Set for production (fixed names for monitoring, logging)
# - Leave empty for development (auto-generated names, allows multiple versions)
POSTGRES_CONTAINER_NAME=memocards-postgres
APP_CONTAINER_NAME=memocards-app

# Network configuration
NETWORK_NAME=memocards-network
NETWORK_SUBNET=172.20.0.0/16

# Ports (dev: exposed to host)
POSTGRES_PORT=5432
APP_PORT=8080

# Logs path
APP_LOGS_PATH=./logs

# =============================================================================
# APPLICATION IMAGE
# =============================================================================
# Use specific version to avoid cache issues:
# APP_IMAGE=ghcr.io/apolenkov/memocards:0.1          # Use semantic version
# APP_IMAGE=ghcr.io/apolenkov/memocards:1730066000  # Use timestamp (from local build)
# APP_IMAGE=ghcr.io/apolenkov/memocards:abc1234     # Use git SHA (from CI/CD)
APP_IMAGE=ghcr.io/apolenkov/memocards:latest         # Use latest (default, may cache)

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
DB_NAME=memocards
DB_USER=memocards_user
DB_PASSWORD=postgres
DB_URL="jdbc:postgresql://localhost:5432/memocards"
POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

# =============================================================================
# RESOURCE LIMITS (Development - optional)
# =============================================================================
# POSTGRES_MEMORY_LIMIT=512m
# POSTGRES_MEMORY_RESERVATION=256m
# APP_MEMORY_LIMIT=1500m
# APP_MEMORY_RESERVATION=512m

# =============================================================================
# HEALTHCHECK CONFIGURATION
# =============================================================================
POSTGRES_HEALTHCHECK_START=30s
APP_HEALTHCHECK_START=60s

# =============================================================================
# CACHE CONFIGURATION
# =============================================================================

# User Cache (session-scoped)
CACHE_USER_TTL=30
CACHE_USER_MAX_SIZE=1000

# Decks Cache (UI-scoped, 1 minute TTL)
CACHE_DECKS_TTL=60000
CACHE_DECKS_MAX_SIZE=1000

# Known Cards Cache (less volatile, 5 minutes TTL)
CACHE_KNOWN_CARDS_TTL=300000
CACHE_KNOWN_CARDS_MAX_SIZE=1000

# Pagination Count Cache
CACHE_PAGINATION_COUNT_TTL=60000
CACHE_PAGINATION_COUNT_MAX_SIZE=500

# Cache Monitoring
CACHE_MONITORING_ENABLED=true
CACHE_LOG_INTERVAL=300000

# =============================================================================
# UI CONFIGURATION
# =============================================================================
SEARCH_DEBOUNCE_MS=300
PAGINATION_PAGE_SIZE=50

# =============================================================================
# MONITORING & PERFORMANCE
# =============================================================================
SLOW_QUERY_THRESHOLD=100
HIKARI_MONITORING_ENABLED=false
HIKARI_LOG_INTERVAL=60000

# =============================================================================
# SECURITY
# =============================================================================
MAX_FAILED_ATTEMPTS=5
FAILED_ATTEMPTS_WINDOW=15

# =============================================================================
# DATA SEEDING
# =============================================================================

# Demo Users (admin and regular user with predefined credentials)
SEED_DEMO_DATA=true
DEMO_ADMIN_PASSWORD=admin
DEMO_USER_PASSWORD=user

# Test Data Generation (bulk data for load testing)
GENERATE_TEST_DATA=false
TEST_USER_PASSWORD=testPassword123

# Test Data Limits
BATCH_SIZE_USERS=100
LIMIT_USERS=100
LIMIT_DECKS=10
LIMIT_CARDS=50
LIMIT_NEWS=50

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================

# Spring Profile
SPRING_PROFILES_ACTIVE=dev

# =============================================================================
# JIB CONFIGURATION
# =============================================================================

# Registry Configuration
GITHUB_TOKEN=ADD_YOUR_TOKEN_HERE
GITHUB_REPOSITORY=apolenkov/memocards
GITHUB_ACTOR=ADD_YOUR_USERNAME_HERE

# =============================================================================
# AUTOMATIC CI/CD VARIABLES (GitHub Actions)
# =============================================================================
# These are set automatically by GitHub Actions, no manual configuration needed:
# GITHUB_SHA - Git commit SHA (used for Docker image tagging)
# GITHUB_REF - Git reference (branch/tag)
# GITHUB_WORKFLOW - Workflow name

# =============================================================================
# IMPORTANT: JIB PUSH CONFIGURATION
# =============================================================================
# To use jib-push commands, you need to:
# 1. Set your GitHub token: GITHUB_TOKEN=your_token_here
# 2. Set your GitHub username: GITHUB_ACTOR=your_username
# 3. Uncomment the lines above
# 4. Run: make jib-push

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Logging path (in container: /app/logs, mapped to host ./logs)
LOGGING_FILE_PATH=/app/logs
LOGGING_FILE_NAME=application.log

# =============================================================================
# JVM CONFIGURATION
# =============================================================================
# JVM options (optional, defaults are fine for dev)
# JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=60.0 -XX:+UseG1GC

# =============================================================================
# VAADIN CONFIGURATION
# =============================================================================
# Browser launch (dev: true, prod: false)
VAADIN_LAUNCH_BROWSER=true
# Production mode (dev: false, prod: true)
VAADIN_PRODUCTION_MODE=false

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
SERVER_PORT=8080
SERVER_COMPRESSION_ENABLED=true
SERVER_COMPRESSION_MIN_SIZE=512
SERVER_HTTP2_ENABLED=true

# =============================================================================
# MANAGEMENT CONFIGURATION
# =============================================================================
MANAGEMENT_ENDPOINTS=health,info,metrics,prometheus
MANAGEMENT_HEALTH_SHOW_DETAILS=when-authorized
MANAGEMENT_HEALTH_SHOW_COMPONENTS=when-authorized
MANAGEMENT_METRICS_JVM=true
MANAGEMENT_METRICS_JDBC=true
MANAGEMENT_METRICS_HIKARI=true
MANAGEMENT_METRICS_LOGBACK=true
MANAGEMENT_PROMETHEUS_ENABLED=true
