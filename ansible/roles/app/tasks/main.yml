---
# =============================================================================
# ROLE: app
# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Memocards –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Docker Compose
# =============================================================================

- name: Copy Docker Compose configuration
  copy:
    src: "{{ playbook_dir }}/../../docker-compose.yml"
    dest: "{{ app_deploy_path }}/docker-compose.yml"
    mode: '0644'
  tags: [app, config]

- name: Generate production environment file from template
  template:
    src: env.prod.j2
    dest: "{{ app_deploy_path }}/.env"
    mode: '0600'
    backup: yes
  tags: [app, config]

- name: Pull application image from GHCR
  community.docker.docker_image_pull:
    name: "{{ app_image }}"
  register: image_pull_result
  tags: [app, deploy]

- name: Stop existing containers (if any)
  community.docker.docker_compose_v2:
    project_src: "{{ app_deploy_path }}"
    files: docker-compose.yml
    state: stopped
  ignore_errors: yes
  tags: [app, deploy]

- name: Start application services
  community.docker.docker_compose_v2:
    project_src: "{{ app_deploy_path }}"
    files: docker-compose.yml
    state: present
    recreate: always
    pull: always
  register: compose_result
  tags: [app, deploy]

- name: Wait for PostgreSQL to be healthy
  shell: |
    docker inspect memocards-postgres-prod | grep -q '"Status": "healthy"' || \
    docker inspect memocards-postgres-prod | grep -q '"State":{"Status":"running"}' || \
    echo "waiting..."
  register: postgres_health
  retries: 30
  delay: 2
  until: postgres_health.rc == 0
  changed_when: false
  tags: [app, health]

- name: Wait for application to be ready
  uri:
    url: "http://localhost:{{ app_port }}/actuator/health"
    method: GET
    status_code: 200
  retries: 60
  delay: 5
  register: app_health_check
  until: app_health_check.status == 200
  tags: [app, health]

- name: Create backup script
  template:
    src: backup.sh.j2
    dest: /usr/local/bin/memocards-backup.sh
    mode: '0755'
  when: backup_enabled | default(true) | bool
  tags: [app, backup]

- name: Create backup cron job
  cron:
    name: "Memocards database backup"
    minute: "0"
    hour: "2"
    job: "/usr/local/bin/memocards-backup.sh"
    user: root
  when: backup_enabled | default(true) | bool
  tags: [app, backup]

- name: Create monitoring script
  template:
    src: monitor.sh.j2
    dest: /usr/local/bin/memocards-monitor.sh
    mode: '0755'
  when: monitoring_enabled | default(true) | bool
  tags: [app, monitoring]

- name: Create monitoring cron job
  cron:
    name: "Memocards health monitoring"
    minute: "*/5"
    job: "/usr/local/bin/memocards-monitor.sh"
    user: root
  when: monitoring_enabled | default(true) | bool
  tags: [app, monitoring]

- name: Get container status
  command: docker compose -f {{ app_deploy_path }}/docker-compose.yml ps
  register: container_status
  changed_when: false
  tags: [app, verify]

- name: Display application deployment status
  debug:
    msg: |
      ‚úÖ Application role completed:
      
      üì¶ Deployment:
      - Application image: {{ app_image }}
      - Health check: {{ 'PASSED ‚úÖ' if app_health_check.status == 200 else 'FAILED ‚ùå' }}
      - Database: PostgreSQL (containerized)
      - Deploy path: {{ app_deploy_path }}
      
      üîß Management:
      - Backup: {{ 'Configured (daily at 2:00 AM)' if backup_enabled | default(true) | bool else 'Disabled' }}
      - Monitoring: {{ 'Configured (every 5 minutes)' if monitoring_enabled | default(true) | bool else 'Disabled' }}
      - Logs: {{ app_deploy_path }}/logs
      
      üåê Access:
      - URL: https://{{ domain }}
      - Health: http://{{ domain }}/actuator/health
      
      üìã Useful commands:
      - View logs: docker logs -f memocards-app-prod
      - Restart app: docker compose -f {{ app_deploy_path }}/docker-compose.yml restart app
      - Check status: docker compose -f {{ app_deploy_path }}/docker-compose.yml ps
  tags: [app]

