---
alwaysApply: true
autoFix: true
version: "1.0.0"
tags: ["java21", "spring3", "vaadin24", "postgresql"]
---

# PROJECT RULES - Java 21 + Spring Boot 3 + Vaadin 24 + PostgreSQL

## STACK
Java 21 | Spring Boot 3.x | Vaadin 24 | PostgreSQL | Lombok | SLF4J/Logback

## ARCHITECTURE
- **Principles**: SOLID, DRY, KISS, YAGNI
- **Layers**: Domain > Application > Infrastructure > UI (Clean Architecture)
- **Injection**: Constructor only (NO @Autowired fields)
- **Limits**: Class <300 lines | Method <50 lines | Params <5 | Nesting <3

## LAYERS

### Entity
- @Entity + @Data (Lombok) + @Id @GeneratedValue(IDENTITY)
- FetchType.LAZY for relationships
- Validation: @Size, @NotEmpty, @Email

### Repository
- @Repository + interface only + extends JpaRepository<Entity, ID>
- JPQL for @Query | @EntityGraph for relations (avoid N+1)
- DTOs for multi-join queries

### Service  
- Interface + @Service on implementation
- Constructor injection | Return DTOs (not entities)
- .orElseThrow() for checks | @Transactional for multi-ops

### Controller
- @RestController + @RequestMapping (class-level)
- RESTful: GET/POST/PUT/DELETE /{id}
- Constructor injection | Try-catch all | GlobalExceptionHandler

## PERFORMANCE
Virtual Threads (I/O) | Caching | Async (CompletableFuture) | HikariCP pooling

## TESTING
Pyramid: 70% unit | 20% integration | 10% e2e | Coverage 80%+ | AssertJ | TestContainers

## UI/UX
**See @vaadin-best-practices for detailed Vaadin rules**
- i18n: getTranslation() only (NO hardcoded strings)
- Lumo theme tokens (NO hardcoded styles)
- Accessibility + Responsive (mobile-first)

## PROHIBITIONS
- ‚ùå System.out.println ‚Üí SLF4J/Logback
- ‚ùå @Autowired fields ‚Üí constructor injection
- ‚ùå Hardcoded UI strings ‚Üí getTranslation()
- ‚ùå Nullable primitives ‚Üí wrapper types
- ‚ùå SQL concatenation ‚Üí parameterized queries
- ‚ùå Dead/commented code ‚Üí remove
- ‚ùå Code duplication ‚Üí extract

## STANDARDS
- **Locale**: ru-RU (Russian chat | English code)
- **JavaDoc**: Concise, substantive
- **Logging**: Structured with context
- **KISS > Complex**: Simple solutions always
- **SRP**: Single responsibility per class
- **Constants**: test-ids, CSS, routes (NOT log messages)

## üìè LIMITS & TRIGGERS

### Size Limits
Class: <300 lines | Method: <50 lines, <15 complexity | Params: <5 | Nesting: <3

### Auto-Refactor When
Class >300 ‚Üí Extract | Method >15 complexity ‚Üí Split | Params >5 ‚Üí Builder/DTO

### Strategies
Extract Method/Class/Interface | Builder/Strategy/Factory patterns

## üî• AUTO-ACTIONS

For any file mentioned, automatically:
1. Apply all rules | 2. Check quality | 3. Fix issues
4. Suggest improvements | 5. Add tests | 6. Implement i18n
7. Setup logging | 8. Check security | 9. Optimize performance | 10. Add docs

## üè∑Ô∏è TAGS

**#java #spring**: SOLID | Clean Arch | Constructor Injection | Java 21 (Virtual Threads, Records, Pattern Matching) | Spring Boot 3.x (Jakarta EE 10, AOT)

**#security**: OWASP Top 10 | Input Validation | SQL/XSS Prevention | OAuth2/JWT/MFA

**#performance**: Virtual Threads | Caching | Async | DB Optimization | PostgreSQL tuning

**#testing**: Pyramid (70/20/10) | 80% Coverage | AAA | TestContainers | AssertJ

**#vaadin**: See @vaadin-best-practices | DSL | Lumo | i18n | Accessibility | PWA

**#database**: JPA | Repository | DTOs | PostgreSQL (JSONB, arrays, full-text) | Migrations

## üéØ RESULT

**SUPER-OPTIMIZED AI** - automatically applies ALL rules at SENIOR+ level:
‚úÖ Auto-apply rules | ‚úÖ Fix issues proactively | ‚úÖ Suggest improvements
‚úÖ Enterprise standards | ‚úÖ Maximum efficiency