---
alwaysApply: true
autoFix: true
version: "4.0.0"
---

# PROJECT RULES - SENIOR+ LEVEL
Java 21+ | Vaadin 24+ | Spring Boot 3.x | PostgreSQL

## CORE AI BEHAVIOR
- **Autonomous**: Complete tasks end-to-end without confirmation
- **Documentation**: Use actual documentation by context7 mcp
- **Enterprise Level**: Senior+ without interruptions
- **Quality First**: Apply all standards automatically

## JAVA 21+ STANDARDS
- **Virtual Threads**: Available in Spring Boot 3.2+ (set spring.threads.virtual.enabled=true)
- **Pattern Matching**: Switch expressions, instanceof patterns
- **Records**: Immutable DTOs (5+ params → Builder, 2-4 → Static factory)
- **Text Blocks**: SQL, JSON, long strings
- **Compact Constructor**: Technical validation only (null, blank, positive IDs)

## CODE QUALITY
- **SOLID + Clean Architecture**: Strict layer separation
- **DRY + KISS**: Simple readable code beats complex "optimized"
- **Constructor Injection**: Always (never @Autowired on fields)
- **Immutable Design**: Records and final classes

## SECURITY (OWASP)
- **Authorization + Input Validation**: All boundaries (UI, API, DB)
- **SQL Injection**: Parameterized queries only
- **XSS**: Encode all user-generated content

## VAADIN 24+ UI/UX
- **DSL**: Native Vaadin DSL over JavaScript
- **i18n**: NEVER hardcoded strings - always getTranslation()
- **Lumo Theme**: Lumo tokens for all styling
- **Responsive**: Mobile-first (CSS Grid, Flexbox)
- **PWA**: @PWA annotation, offline support

## SPRING DATA JDBC (NOT JPA!)
- **Adapter Pattern**: `*JdbcAdapter implements *Repository` + @Profile
- **DTOs**: Records with static factory methods
- **SQL**: Text blocks in `*SqlQueries` classes
- **Transactions**: @Transactional on Service layer ONLY

## JAVADOC
**DO**: Purpose, behavior, constraints, parameters, exceptions  
**DON'T**: Implementation details, refactoring history, obvious descriptions

## CRITICAL PROHIBITIONS
- **NEVER use System.out.println** → SLF4J/Logback
- **NEVER use System.getenv() directly** → @Value
- **NEVER hardcoded strings in UI** → getTranslation()
- **NEVER @Autowired on fields** → constructor injection
- **NEVER leave dead/commented/unreachable code** → remove
- **NEVER duplicate code** → extract common functionality
- **NEVER @Component + extends Dialog** → singleton corruption
- **NEVER reuse UI components** → removeAll() + add(same) = memory leak
- **NEVER final for @Component/@Service with @Lazy** → CGLIB cannot subclass

## COMMUNICATION
- **English Code**: All code (names, comments, messages)
- **Russian Chat**: Chat communication
- **No Reports**: NO detailed progress reports after completing tasks - just do the work
- **Brevity**: Acknowledge request → do work → confirm done (1-2 sentences max)
