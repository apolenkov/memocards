---
alwaysApply: true
---

# 📚 DETAILED RULES FOR SPECIFIC TOPICS

## 🏷️ Search by Tags and Categories

### #java #spring
- **SOLID Principles** - all 5 principles always
- **Clean Architecture** - strict layer separation
- **Constructor Injection** - only for Spring beans (never @Autowired on fields)
- **Java 21+ patterns**: Virtual Threads, Pattern Matching, Records, Sealed Classes
- **Spring Boot 3.x**: Jakarta EE 10, Native compilation, AOT compilation
- **Modern concurrency**: Structured Concurrency, CompletableFuture, Reactive patterns

### #security #owasp
- **OWASP Top 10 2024** - latest compliance always
- **Input Validation** - validation of all external inputs
- **SQL Injection Protection** - parameterized queries
- **XSS Prevention** - encoding of user-generated content
- **Security Headers** - proper HTTP headers
- **Modern authentication** - OAuth2, JWT, MFA

### #performance #monitoring
- **Virtual Threads** - Java 21+ concurrency model
- **Caching Strategy** - strategic application
- **Async Processing** - CompletableFuture for I/O
- **Database Optimization** - query and index optimization
- **APM** - distributed tracing, metrics, alerting
- **Memory Management** - efficient memory usage
- **PostgreSQL optimization** - JSONB, arrays, full-text search

### #testing #qa
- **Testing Pyramid**: 70% Unit, 20% Integration, 10% E2E
- **Coverage**: minimum 80% for business logic
- **AAA Pattern**: Arrange, Act, Assert
- **Test Data Builders** - consistent test data
- **Mocking Strategy** - only external dependencies
- **Test Containers** - real PostgreSQL for integration tests
- **Mutation Testing** - PIT for code quality validation
- **AssertJ Best Practices**:
  - `isEqualTo(0)` → `isZero()`
  - `get(0)` → `getFirst()`
  - `List.of()` вместо `Arrays.asList()`
  - Цепочка assertThat: `assertThat(result).hasSize(3).isEqualTo(expected)`
  - `assertThat(result).contains(expected)` для Optional вместо `assertThat(result.get()).isEqualTo(expected)`

### #ui #ux #vaadin
- **Vaadin 24+ DSL** - prefer native components
- **TypeScript support** - for custom components
- **Lumo Theme** - use standard tokens
- **i18n** - all strings through getTranslation()
- **Accessibility** - ARIA labels, semantic HTML
- **Responsive Design** - mobile-first approach
- **PWA features** - Progressive Web App capabilities
- **Virtual scrolling** - for large datasets

### #database #jpa #postgresql
- **JPA Entity Design** - @Id with @GeneratedValue, audit fields
- **Repository Layer** - @Query with parameters, pagination
- **DTOs** - separate from entities, immutable design
- **Transactions** - @Transactional at service level
- **Query Optimization** - avoid N+1 queries
- **PostgreSQL features**: JSONB, arrays, full-text search, partitioning
- **Connection pooling** - HikariCP optimization
- **Database migrations** - Flyway versioning

### #logging #communication
- **SLF4J/Logback** - never System.out.println
- **Structured Logging** - with proper context
- **MDC** - for request-scoped information
- **Russian** - for chat communication
- **English** - for code and documentation

## 🔍 Problem Search

### "How to fix..."
- **SQL injection** → #security #database
- **Memory leaks** → #performance #java
- **Slow queries** → #performance #database
- **Security vulnerabilities** → #security #owasp
- **Code duplication** → #architecture #solid
- **Poor performance** → #performance #monitoring
- **Bad error messages** → #error-handling #ui
- **Hardcoded strings** → #i18n #ui
- **System.out.println** → #logging #java
- **@Autowired on fields** → #spring #architecture

### "How to implement..."
- **Caching** → #caching #performance
- **Async processing** → #async #performance
- **Security headers** → #security #owasp
- **Error handling** → #error-handling
- **Testing strategy** → #testing
- **Database optimization** → #database #performance
- **UI components** → #ui #vaadin
- **Logging strategy** → #logging
- **Documentation** → #documentation
- **Monitoring** → #monitoring #performance

## 📋 Quick Version for Fast Overview

### Core Principles
1. **Autonomy** - complete tasks fully without confirmations
2. **Quality** - architecture > quick fixes
3. **Security** - OWASP compliance, validation of all inputs
4. **Performance** - caching, async operations, optimization
5. **Testing** - 80% unit, 20% integration, 10% e2e

### Key Prohibitions
- ❌ `System.out.println` → use SLF4J/Logback
- ❌ FQN in code → always add imports
- ❌ Hardcoded strings in UI → use `getTranslation()`
- ❌ `@Autowired` on fields → only constructor injection
- ❌ Primitives in nullable fields → use wrapper types
- ❌ SQL string concatenation → only parameterized queries
- ❌ Log sensitive information → passwords, tokens, PII
- ❌ Full class names (FCL) → always add proper imports
- ❌ Leave dead code → remove unused methods, classes, variables
- ❌ Leave commented code → delete or implement properly
- ❌ Leave unreachable code → remove or fix logic
- ❌ Duplicate code → extract common functionality, follow DRY principle
- ❌ Copy-paste code → create reusable methods and utilities

## 🎯 Result

Now you have **3 key files** instead of 17:
1. **`00-super-rules.mdc`** - ALL core rules in one place
2. **`01-commands.mdc`** - commands for maximum efficiency
3. **`02-detailed-rules.mdc`** - detailed rules by topics (this file)

**Maximum efficiency** with minimal number of files! 🚀


# 📚 DETAILED RULES FOR SPECIFIC TOPICS

## 🏷️ Search by Tags and Categories

### #java #spring
- **SOLID Principles** - all 5 principles always
- **Clean Architecture** - strict layer separation
- **Constructor Injection** - only for Spring beans (never @Autowired on fields)
- **Java 21+ patterns**: Virtual Threads, Pattern Matching, Records, Sealed Classes
- **Spring Boot 3.x**: Jakarta EE 10, Native compilation, AOT compilation
- **Modern concurrency**: Structured Concurrency, CompletableFuture, Reactive patterns

### #security #owasp
- **OWASP Top 10 2024** - latest compliance always
- **Input Validation** - validation of all external inputs
- **SQL Injection Protection** - parameterized queries
- **XSS Prevention** - encoding of user-generated content
- **Security Headers** - proper HTTP headers
- **Modern authentication** - OAuth2, JWT, MFA

### #performance #monitoring
- **Virtual Threads** - Java 21+ concurrency model
- **Caching Strategy** - strategic application
- **Async Processing** - CompletableFuture for I/O
- **Database Optimization** - query and index optimization
- **APM** - distributed tracing, metrics, alerting
- **Memory Management** - efficient memory usage
- **PostgreSQL optimization** - JSONB, arrays, full-text search

### #testing #qa
- **Testing Pyramid**: 70% Unit, 20% Integration, 10% E2E
- **Coverage**: minimum 80% for business logic
- **AAA Pattern**: Arrange, Act, Assert
- **Test Data Builders** - consistent test data
- **Mocking Strategy** - only external dependencies
- **Test Containers** - real PostgreSQL for integration tests
- **Mutation Testing** - PIT for code quality validation

### #ui #ux #vaadin
- **Vaadin 24+ DSL** - prefer native components
- **TypeScript support** - for custom components
- **Lumo Theme** - use standard tokens
- **i18n** - all strings through getTranslation()
- **Accessibility** - ARIA labels, semantic HTML
- **Responsive Design** - mobile-first approach
- **PWA features** - Progressive Web App capabilities
- **Virtual scrolling** - for large datasets

### #database #jpa #postgresql
- **JPA Entity Design** - @Id with @GeneratedValue, audit fields
- **Repository Layer** - @Query with parameters, pagination
- **DTOs** - separate from entities, immutable design
- **Transactions** - @Transactional at service level
- **Query Optimization** - avoid N+1 queries
- **PostgreSQL features**: JSONB, arrays, full-text search, partitioning
- **Connection pooling** - HikariCP optimization
- **Database migrations** - Flyway versioning

### #logging #communication
- **SLF4J/Logback** - never System.out.println
- **Structured Logging** - with proper context
- **MDC** - for request-scoped information
- **Russian** - for chat communication
- **English** - for code and documentation

## 🔍 Problem Search

### "How to fix..."
- **SQL injection** → #security #database
- **Memory leaks** → #performance #java
- **Slow queries** → #performance #database
- **Security vulnerabilities** → #security #owasp
- **Code duplication** → #architecture #solid
- **Poor performance** → #performance #monitoring
- **Bad error messages** → #error-handling #ui
- **Hardcoded strings** → #i18n #ui
- **System.out.println** → #logging #java
- **@Autowired on fields** → #spring #architecture

### "How to implement..."
- **Caching** → #caching #performance
- **Async processing** → #async #performance
- **Security headers** → #security #owasp
- **Error handling** → #error-handling
- **Testing strategy** → #testing
- **Database optimization** → #database #performance
- **UI components** → #ui #vaadin
- **Logging strategy** → #logging
- **Documentation** → #documentation
- **Monitoring** → #monitoring #performance

## 📋 Quick Version for Fast Overview

### Core Principles
1. **Autonomy** - complete tasks fully without confirmations
2. **Quality** - architecture > quick fixes
3. **Security** - OWASP compliance, validation of all inputs
4. **Performance** - caching, async operations, optimization
5. **Testing** - 80% unit, 20% integration, 10% e2e

### Key Prohibitions
- ❌ `System.out.println` → use SLF4J/Logback
- ❌ FQN in code → always add imports
- ❌ Hardcoded strings in UI → use `getTranslation()`
- ❌ `@Autowired` on fields → only constructor injection
- ❌ Primitives in nullable fields → use wrapper types
- ❌ SQL string concatenation → only parameterized queries
- ❌ Log sensitive information → passwords, tokens, PII
- ❌ Full class names (FCL) → always add proper imports

## 🎯 Result

Now you have **3 key files** instead of 17:
1. **`00-super-rules.mdc`** - ALL core rules in one place
2. **`01-commands.mdc`** - commands for maximum efficiency
3. **`02-detailed-rules.mdc`** - detailed rules by topics (this file)

**Maximum efficiency** with minimal number of files! 🚀


**Maximum efficiency** with minimal number of files! 🚀


**Maximum efficiency** with minimal number of files! 🚀


**Maximum efficiency** with minimal number of files! 🚀





# 📚 DETAILED RULES FOR SPECIFIC TOPICS

## 🏷️ Search by Tags and Categories

### #java #spring
- **SOLID Principles** - all 5 principles always
- **Clean Architecture** - strict layer separation
- **Constructor Injection** - only for Spring beans (never @Autowired on fields)
- **Java 21+ patterns**: Virtual Threads, Pattern Matching, Records, Sealed Classes
- **Spring Boot 3.x**: Jakarta EE 10, Native compilation, AOT compilation
- **Modern concurrency**: Structured Concurrency, CompletableFuture, Reactive patterns

### #security #owasp
- **OWASP Top 10 2024** - latest compliance always
- **Input Validation** - validation of all external inputs
- **SQL Injection Protection** - parameterized queries
- **XSS Prevention** - encoding of user-generated content
- **Security Headers** - proper HTTP headers
- **Modern authentication** - OAuth2, JWT, MFA

### #performance #monitoring
- **Virtual Threads** - Java 21+ concurrency model
- **Caching Strategy** - strategic application
- **Async Processing** - CompletableFuture for I/O
- **Database Optimization** - query and index optimization
- **APM** - distributed tracing, metrics, alerting
- **Memory Management** - efficient memory usage
- **PostgreSQL optimization** - JSONB, arrays, full-text search

### #testing #qa
- **Testing Pyramid**: 70% Unit, 20% Integration, 10% E2E
- **Coverage**: minimum 80% for business logic
- **AAA Pattern**: Arrange, Act, Assert
- **Test Data Builders** - consistent test data
- **Mocking Strategy** - only external dependencies
- **Test Containers** - real PostgreSQL for integration tests
- **Mutation Testing** - PIT for code quality validation
- **AssertJ Best Practices**:
  - `isEqualTo(0)` → `isZero()`
  - `get(0)` → `getFirst()`
  - `List.of()` вместо `Arrays.asList()`
  - Цепочка assertThat: `assertThat(result).hasSize(3).isEqualTo(expected)`
  - `assertThat(result).contains(expected)` для Optional вместо `assertThat(result.get()).isEqualTo(expected)`

### #ui #ux #vaadin
- **Vaadin 24+ DSL** - prefer native components
- **TypeScript support** - for custom components
- **Lumo Theme** - use standard tokens
- **i18n** - all strings through getTranslation()
- **Accessibility** - ARIA labels, semantic HTML
- **Responsive Design** - mobile-first approach
- **PWA features** - Progressive Web App capabilities
- **Virtual scrolling** - for large datasets

### #database #jpa #postgresql
- **JPA Entity Design** - @Id with @GeneratedValue, audit fields
- **Repository Layer** - @Query with parameters, pagination
- **DTOs** - separate from entities, immutable design
- **Transactions** - @Transactional at service level
- **Query Optimization** - avoid N+1 queries
- **PostgreSQL features**: JSONB, arrays, full-text search, partitioning
- **Connection pooling** - HikariCP optimization
- **Database migrations** - Flyway versioning

### #logging #communication
- **SLF4J/Logback** - never System.out.println
- **Structured Logging** - with proper context
- **MDC** - for request-scoped information
- **Russian** - for chat communication
- **English** - for code and documentation

## 🔍 Problem Search

### "How to fix..."
- **SQL injection** → #security #database
- **Memory leaks** → #performance #java
- **Slow queries** → #performance #database
- **Security vulnerabilities** → #security #owasp
- **Code duplication** → #architecture #solid
- **Poor performance** → #performance #monitoring
- **Bad error messages** → #error-handling #ui
- **Hardcoded strings** → #i18n #ui
- **System.out.println** → #logging #java
- **@Autowired on fields** → #spring #architecture

### "How to implement..."
- **Caching** → #caching #performance
- **Async processing** → #async #performance
- **Security headers** → #security #owasp
- **Error handling** → #error-handling
- **Testing strategy** → #testing
- **Database optimization** → #database #performance
- **UI components** → #ui #vaadin
- **Logging strategy** → #logging
- **Documentation** → #documentation
- **Monitoring** → #monitoring #performance

## 📋 Quick Version for Fast Overview

### Core Principles
1. **Autonomy** - complete tasks fully without confirmations
2. **Quality** - architecture > quick fixes
3. **Security** - OWASP compliance, validation of all inputs
4. **Performance** - caching, async operations, optimization
5. **Testing** - 80% unit, 20% integration, 10% e2e

### Key Prohibitions
- ❌ `System.out.println` → use SLF4J/Logback
- ❌ FQN in code → always add imports
- ❌ Hardcoded strings in UI → use `getTranslation()`
- ❌ `@Autowired` on fields → only constructor injection
- ❌ Primitives in nullable fields → use wrapper types
- ❌ SQL string concatenation → only parameterized queries
- ❌ Log sensitive information → passwords, tokens, PII
- ❌ Full class names (FCL) → always add proper imports
- ❌ Leave dead code → remove unused methods, classes, variables
- ❌ Leave commented code → delete or implement properly
- ❌ Leave unreachable code → remove or fix logic
- ❌ Duplicate code → extract common functionality, follow DRY principle
- ❌ Copy-paste code → create reusable methods and utilities

## 🎯 Result

Now you have **3 key files** instead of 17:
1. **`00-super-rules.mdc`** - ALL core rules in one place
2. **`01-commands.mdc`** - commands for maximum efficiency
3. **`02-detailed-rules.mdc`** - detailed rules by topics (this file)

**Maximum efficiency** with minimal number of files! 🚀


# 📚 DETAILED RULES FOR SPECIFIC TOPICS

## 🏷️ Search by Tags and Categories

### #java #spring
- **SOLID Principles** - all 5 principles always
- **Clean Architecture** - strict layer separation
- **Constructor Injection** - only for Spring beans (never @Autowired on fields)
- **Java 21+ patterns**: Virtual Threads, Pattern Matching, Records, Sealed Classes
- **Spring Boot 3.x**: Jakarta EE 10, Native compilation, AOT compilation
- **Modern concurrency**: Structured Concurrency, CompletableFuture, Reactive patterns

### #security #owasp
- **OWASP Top 10 2024** - latest compliance always
- **Input Validation** - validation of all external inputs
- **SQL Injection Protection** - parameterized queries
- **XSS Prevention** - encoding of user-generated content
- **Security Headers** - proper HTTP headers
- **Modern authentication** - OAuth2, JWT, MFA

### #performance #monitoring
- **Virtual Threads** - Java 21+ concurrency model
- **Caching Strategy** - strategic application
- **Async Processing** - CompletableFuture for I/O
- **Database Optimization** - query and index optimization
- **APM** - distributed tracing, metrics, alerting
- **Memory Management** - efficient memory usage
- **PostgreSQL optimization** - JSONB, arrays, full-text search

### #testing #qa
- **Testing Pyramid**: 70% Unit, 20% Integration, 10% E2E
- **Coverage**: minimum 80% for business logic
- **AAA Pattern**: Arrange, Act, Assert
- **Test Data Builders** - consistent test data
- **Mocking Strategy** - only external dependencies
- **Test Containers** - real PostgreSQL for integration tests
- **Mutation Testing** - PIT for code quality validation

### #ui #ux #vaadin
- **Vaadin 24+ DSL** - prefer native components
- **TypeScript support** - for custom components
- **Lumo Theme** - use standard tokens
- **i18n** - all strings through getTranslation()
- **Accessibility** - ARIA labels, semantic HTML
- **Responsive Design** - mobile-first approach
- **PWA features** - Progressive Web App capabilities
- **Virtual scrolling** - for large datasets

### #database #jpa #postgresql
- **JPA Entity Design** - @Id with @GeneratedValue, audit fields
- **Repository Layer** - @Query with parameters, pagination
- **DTOs** - separate from entities, immutable design
- **Transactions** - @Transactional at service level
- **Query Optimization** - avoid N+1 queries
- **PostgreSQL features**: JSONB, arrays, full-text search, partitioning
- **Connection pooling** - HikariCP optimization
- **Database migrations** - Flyway versioning

### #logging #communication
- **SLF4J/Logback** - never System.out.println
- **Structured Logging** - with proper context
- **MDC** - for request-scoped information
- **Russian** - for chat communication
- **English** - for code and documentation

## 🔍 Problem Search

### "How to fix..."
- **SQL injection** → #security #database
- **Memory leaks** → #performance #java
- **Slow queries** → #performance #database
- **Security vulnerabilities** → #security #owasp
- **Code duplication** → #architecture #solid
- **Poor performance** → #performance #monitoring
- **Bad error messages** → #error-handling #ui
- **Hardcoded strings** → #i18n #ui
- **System.out.println** → #logging #java
- **@Autowired on fields** → #spring #architecture

### "How to implement..."
- **Caching** → #caching #performance
- **Async processing** → #async #performance
- **Security headers** → #security #owasp
- **Error handling** → #error-handling
- **Testing strategy** → #testing
- **Database optimization** → #database #performance
- **UI components** → #ui #vaadin
- **Logging strategy** → #logging
- **Documentation** → #documentation
- **Monitoring** → #monitoring #performance

## 📋 Quick Version for Fast Overview

### Core Principles
1. **Autonomy** - complete tasks fully without confirmations
2. **Quality** - architecture > quick fixes
3. **Security** - OWASP compliance, validation of all inputs
4. **Performance** - caching, async operations, optimization
5. **Testing** - 80% unit, 20% integration, 10% e2e

### Key Prohibitions
- ❌ `System.out.println` → use SLF4J/Logback
- ❌ FQN in code → always add imports
- ❌ Hardcoded strings in UI → use `getTranslation()`
- ❌ `@Autowired` on fields → only constructor injection
- ❌ Primitives in nullable fields → use wrapper types
- ❌ SQL string concatenation → only parameterized queries
- ❌ Log sensitive information → passwords, tokens, PII
- ❌ Full class names (FCL) → always add proper imports

## 🎯 Result

Now you have **3 key files** instead of 17:
1. **`00-super-rules.mdc`** - ALL core rules in one place
2. **`01-commands.mdc`** - commands for maximum efficiency
3. **`02-detailed-rules.mdc`** - detailed rules by topics (this file)

**Maximum efficiency** with minimal number of files! 🚀


**Maximum efficiency** with minimal number of files! 🚀


**Maximum efficiency** with minimal number of files! 🚀


**Maximum efficiency** with minimal number of files! 🚀
