---
alwaysApply: true
autoFix: true
version: "3.0.0"
---

# LOGGING POLICY

## LEVELS
- **DEBUG**: Technical (cache, SQL, internal state)
- **INFO**: Business events (user actions, service init)
- **WARN**: Recoverable problems (validation fail, not found)
- **ERROR**: System failures (DB connection, exceptions)
- **AUDIT**: Security (auth, data modifications)

## STRUCTURED LOGGING
**✅**: `LOGGER.info("Deck: id={}, title='{}'", id, title);`  
**❌**: `LOGGER.info("Deck: " + id);` // String concatenation

## LOGGERS
```java
private static final Logger LOGGER = LoggerFactory.getLogger(MyClass.class);
private static final Logger AUDIT_LOGGER = LoggerFactory.getLogger("org.apolenkov.application.audit");
```

**AUDIT_LOGGER**: Service layer (security, CRUD)  
**LOGGER**: Repository/UI (technical)

**NEVER duplicate logs** - AUDIT_LOGGER writes to both files

## MDC (Mapped Diagnostic Context)
- ✅ NEVER call MDC.put(requestId/userId) manually (filter handles it)
- ✅ ALWAYS cleanup custom fields in finally
- Pattern: `[%X{requestId:-}] [%X{userId:-}] - %msg`

## CRITICAL ANTIPATTERNS
1. String concatenation → use `{}`
2. Logging in loops → log summary
3. NEVER log passwords/tokens/full User
4. Manual MDC.put(requestId/userId) → filter handles it
5. AUDIT + LOGGER duplication → use single logger
