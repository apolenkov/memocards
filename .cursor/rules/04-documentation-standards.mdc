---
description: Documentation standards and JavaDoc quality requirements
globs:
alwaysApply: true
---

# Documentation Standards

## JavaDoc Quality
JavaDoc comments must:
- **Be concise and substantive**, capturing the essence without excessive detail
- **Focus on what** the method/class does, not how it does it
- **Include essential information**: purpose, parameters, return values, exceptions
- **Avoid verbose descriptions** and obvious statements
- **Use clear, professional English** language
- **Follow standard JavaDoc format** and tags

## English Code Language
All code must use English language for:
- **Variable names, function names, class names**
- **Comments and documentation**
- **Error messages and log messages**
- **Database field names and API endpoints**
- **Technical documentation**

## Documentation Guidelines
- **Write high-quality JavaDoc** focusing on purpose and essential information
- **Document architectural decisions** with clear rationale
- **Include comprehensive README** files for complex features
- **Maintain up-to-date documentation** with code changes
- **Use consistent style** across all documentation
- **Document complex business logic** and architectural decisions

## Examples of Good JavaDoc
```java
/**
 * Calculates the total price including tax for the given items.
 * 
 * @param items list of items to calculate price for
 * @param taxRate tax rate as decimal (e.g., 0.20 for 20%)
 * @return total price with tax applied
 * @throws IllegalArgumentException if items list is null or tax rate is negative
 */
public BigDecimal calculateTotalWithTax(List<Item> items, BigDecimal taxRate)
```

## Examples to Avoid
```java
// ❌ Bad - Too generic
/**
 * This method does something.
 */
public void doSomething() { }

// ❌ Bad - Obvious statement
/**
 * This method returns a value.
 */
public String getValue() { return value; }
```
