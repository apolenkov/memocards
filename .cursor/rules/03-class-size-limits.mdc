---
alwaysApply: true
---

# 📏 CLASS SIZE LIMITS & REFACTORING RULES

## 🎯 Google & Industry Standards

### Class Size Limits:
- **Maximum 300 lines** per class (Google Style Guide)
- **Maximum 15 cognitive complexity** per method (SonarLint)
- **Maximum 10 methods** per class (Clean Code principle)
- **Maximum 5 parameters** per method (Clean Code principle)
- **Maximum 3 levels** of nesting (Clean Code principle)

### File Size Limits:
- **Maximum 500 lines** per file (industry standard)
- **Maximum 1000 lines** per file (absolute maximum)
- **Split large files** into smaller, focused components

## 🔧 Automatic Refactoring Triggers

### When to Refactor:
- ✅ **Class > 300 lines** → Extract components/services
- ✅ **Method > 15 cognitive complexity** → Split into smaller methods
- ✅ **Class > 10 methods** → Apply Single Responsibility Principle
- ✅ **Method > 5 parameters** → Use Builder pattern or DTO
- ✅ **Nesting > 3 levels** → Extract methods or use early returns
- ✅ **File > 500 lines** → Split into multiple files

### Refactoring Strategies:
1. **Extract Method** - split large methods
2. **Extract Class** - split large classes
3. **Extract Interface** - separate concerns
4. **Builder Pattern** - reduce parameter count
5. **Strategy Pattern** - reduce conditional complexity
6. **Factory Pattern** - simplify object creation

## 🚫 Prohibitions

- ❌ **NEVER allow classes > 500 lines**
- ❌ **NEVER allow methods > 15 cognitive complexity**
- ❌ **NEVER allow methods > 5 parameters**
- ❌ **NEVER allow nesting > 3 levels**
- ❌ **NEVER allow files > 1000 lines**

## 🎯 Automatic Actions

For each file mentioned, I automatically:
1. ✅ **Check class size** and complexity
2. ✅ **Refactor if needed** to meet limits
3. ✅ **Extract components** for large classes
4. ✅ **Split methods** for high complexity
5. ✅ **Apply design patterns** for better structure
6. ✅ **Maintain SOLID principles** during refactoring

## 📊 Monitoring Commands

- **"Check class sizes"** → scan all classes for size violations
- **"Refactor large classes"** → automatically refactor oversized classes
- **"Check complexity"** → scan for cognitive complexity violations
- **"Extract components"** → split large classes into components
- **"Apply patterns"** → apply design patterns for better structure

## 🎉 Result

Now I automatically:
- ✅ **Prevent large classes** before they become problems
- ✅ **Refactor proactively** to maintain clean code
- ✅ **Apply best practices** from Google and industry standards
- ✅ **Maintain readable code** with proper size limits
- ✅ **Follow SOLID principles** in all refactoring