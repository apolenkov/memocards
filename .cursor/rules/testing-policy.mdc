---
alwaysApply: true
autoFix: true
version: "1.1.0"
---

# TESTING POLICY - CRITICAL RULES

## CORE PRINCIPLE

**NEVER DELETE TESTS BECAUSE THEY FAIL!**

Tests fail for a reason. Fix the reason, not the test.

---

## WHEN TESTS FAIL

### ✅ CORRECT Response:
1. **Investigate WHY** test failed
2. **Identify root cause** (missing dependency, Docker not running, etc.)
3. **ASK USER** if external dependency needed ("Please start Docker: docker compose up -d")
4. **FIX the cause**, not the test
5. **Run tests again** after fix

### ❌ WRONG Response:
1. Test fails → delete test ❌
2. Test fails → add @Disabled ❌
3. Test fails → move to "templates" ❌
4. Test fails → comment out ❌

---

## COMMON FAILURE CAUSES

### 1. TestContainers Error
```
java.lang.IllegalStateException at DockerClientProviderStrategy.java:274
```

**Root Cause**: Docker is not running  
**Solution**: Ask user to start Docker
```bash
docker compose up -d
# or
colima start
```

**NEVER**: Delete integration tests that need Docker!

**Test Profiles Strategy:**
- @SpringBootTest(properties = "spring.profiles.active=integration-test") for TestContainers
- @SpringBootTest(properties = "spring.profiles.active=unit-test") for H2/in-memory
- CI/CD can choose profile based on environment
- Keep both test types for flexibility

**TestContainers Performance:**
- Use singleton mode: @Container static PostgreSQLContainer (shared across tests)
- Reuse containers: @Testcontainers on class level
- Startup time: 2-5 sec per container (singleton reduces to once per test suite)
- For fast feedback: use H2 in PostgreSQL mode for unit tests
- For CI: consider service containers (docker-compose) instead of Testcontainers

---

### 2. Missing Dependencies
```
cannot find symbol: method someMethod()
```

**Root Cause**: Feature not yet implemented  
**Solution**: 
- If feature in patch → wait for patch application
- If feature missing → implement or ask user
- Use `@Disabled("Waiting for feature X")` ONLY if feature confirmed coming

**NEVER**: Delete tests for unimplemented features without asking!

---

### 3. Database Issues
```
Connection refused to localhost:5432
```

**Root Cause**: Database not running  
**Solution**: Ask user to start database
```bash
docker compose up -d postgres
```

**NEVER**: Delete database integration tests!

---

## ALLOWED TEST MODIFICATIONS

### ✅ ALLOWED:
- Fix flaky tests (timing, race conditions)
- Update assertions when requirements change
- Refactor test code (extract methods, improve readability)
- Add @Disabled WITH user permission and clear reason
- Skip tests temporarily IF user explicitly asks

### ❌ FORBIDDEN:
- Delete tests because they fail
- Delete tests because compilation errors (fix code instead!)
- Delete tests because missing Docker/DB (ask user to start!)
- Move tests to "templates" folder
- Add @Disabled without investigation

---

## EXCEPTIONS

### When deletion IS allowed:
1. **User explicitly requests** test deletion
2. **Duplicate test** found (same logic tested twice)
3. **Test for removed feature** (feature no longer exists)
4. **Test replaced** with better alternative (delete old, keep new)

### When @Disabled IS allowed:
1. **Known platform bug** (e.g., "JDK-12345 - fails on macOS only")
2. **Temporary infrastructure issue** (e.g., "External API down")
3. **User explicitly asks** to disable temporarily
4. **WITH clear comment** explaining why and when to re-enable

---

## EXAMPLES

**❌ WRONG:** Delete test when Docker not running  
**✅ CORRECT:** Ask user to start Docker

**❌ WRONG:** Delete test when method missing  
**✅ CORRECT:** Ask if feature is in patch or implement

**❌ WRONG:** Move test to templates on DB error  
**✅ CORRECT:** Ask user to start database

---

## CHECKLIST BEFORE DELETING TEST

Before deleting ANY test, ask yourself:

- [ ] Did user explicitly request deletion?
- [ ] Is this a duplicate test?
- [ ] Was the tested feature removed?
- [ ] Is there a better replacement test?

If all answers are NO → **DON'T DELETE!**

---

## APOLOGY PROTOCOL

If you deleted tests incorrectly:

1. **Admit the mistake** immediately
2. **Explain what you should have done** instead
3. **Help user restore** the test if needed
4. **Create memory** to never repeat this mistake

---

**REMEMBER**: Tests are valuable. Protect them. Fix failures, don't hide them.
