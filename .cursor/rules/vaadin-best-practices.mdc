---
alwaysApply: true
autoFix: true
version: "2.0.0"
---

# VAADIN 24+ BEST PRACTICES

## PATTERNS
Composite<T> + initContent() | Builder | Factory

## LIFECYCLE (CRITICAL!)
1. Constructor → data ONLY (NO UI)
2. @PostConstruct (Spring) or initContent() → getTranslation() safe
3. onAttach → register listeners
4. onDetach → Registration.remove() MANDATORY

## MEMORY ❌
- onDetach: `if(reg!=null) reg.remove()` + `super.onDetach(e)`
- Fields: IDs only (NO collections/objects)

## PERFORMANCE
- Lazy: `grid.setItems(query→service.find(PageRequest))`
- Virtual scroll: `grid.setPageSize(50)`
- Flat hierarchy: max 3 nesting

## UI/UX
- Lumo tokens: `var(--lumo-*)`
- Factory: `ButtonHelper.create*()`
- Responsive: mobile-first

## i18n
- UI: `getTranslation("key")` directly
- ❌ Hardcoded strings → NPE in constructor

## SECURITY
- Server validation + Binder
- CSRF enabled
- ❌ Client-only validation

## CRITICAL ANTIPATTERNS ❌
1. getTranslation() in constructor → NPE
2. Listeners without cleanup → memory leak
3. UI.getCurrent() in thread → NPE (save UI ref first)
4. Component in final field → memory leak
5. grid.setItems(all) for >100 → OOM (use lazy)
6. Forget super.onDetach(e)

## PUSH
@Push + save UI ref: `UI ui=UI.getCurrent(); thread(()->ui.access(()->...))`

## CHECKLIST
- [ ] Composite<T> (reusable) or extends for @Route views
- [ ] @PostConstruct or initContent()
- [ ] onDetach + Registration.remove()
- [ ] getTranslation() for all strings
- [ ] Server validation
- [ ] Lazy loading if >100 items
- [ ] Lumo tokens (no hardcode)
