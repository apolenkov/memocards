---
alwaysApply: true
autoFix: true
version: "5.0.0"
---

# VAADIN 24+ BEST PRACTICES

## LIFECYCLE

### @Route Views (Navigation Targets):
1. **Constructor** → DI + UI structure (getTranslation() safe)
2. **beforeEnter()** → validation, access control, redirects (ONCE per navigation)
3. **afterNavigation()** → load data, update UI (ONCE, NO flag needed!)
4. **onDetach()** → Registration.remove() if listeners

```java
@Route("users")
public class UsersView extends VerticalLayout implements AfterNavigationObserver {
    public UsersView(UserService service) { setupUI(); }
    @Override
    public void afterNavigation(AfterNavigationEvent event) { loadData(); }
}
```

### @UIScope Components (NON-@Route):
1. **Constructor** → data ONLY (NO UI, NO getTranslation())
2. **onAttach()** → init UI + `hasBeenInitialized` flag (onAttach called MULTIPLE times)
3. **onDetach()** → Registration.remove() MANDATORY

```java
@Component @UIScope
public class ChatWidget extends Div {
    private boolean hasBeenInitialized = false;
    
    @Override
    protected void onAttach(AttachEvent event) {
        super.onAttach(event);
        if (!hasBeenInitialized) {
            hasBeenInitialized = true;
            initUI();
        }
    }
    
    @Override
    protected void onDetach(DetachEvent event) {
        super.onDetach(event);
        if (reg != null) reg.remove();
    }
}
```

**Why hasBeenInitialized?** onAttach() called EVERY time component attached/reattached, Vaadin provides NO built-in mechanism.

## PERFORMANCE
- **Lazy Loading**: `grid.setItems(query→service.find(PageRequest))`
- **Virtual Scroll**: `grid.setPageSize(50)`
- **Smart Refresh**: Track state to prevent unnecessary re-renders

## SECURITY
- @AnonymousAllowed, @PermitAll, @RolesAllowed on @Route
- Check permissions in beforeEnter()
- NEVER rely on UI visibility (hidden != secure)
- getTranslation() auto-escapes HTML
- Html() component: ONLY for trusted content

## @UIScope
**Use**: @Component + reused across @Route + needs UI.getCurrent()  
**Don't use**: @Route views, Dialogs, Stateless Services  
**Multi-tab**: @UIScope = per tab, @SessionScope = shared

## DIALOG PATTERN
- ✅ Factory: `new Dialog()` each time
- ❌ `@Component extends Dialog` = singleton corruption

## CRITICAL ANTIPATTERNS
1. getTranslation() in @UIScope constructor → NPE
2. Listeners without cleanup → memory leak
3. grid.setItems(all) for >100 → OOM
4. @Component + extends Dialog → singleton corruption
5. removeAll() + add(sameComponent) → memory leak
6. @PostConstruct in @UIScope → UI not ready
7. onAttach без hasBeenInitialized → double init
8. getComponentCount() для проверки init → unreliable
