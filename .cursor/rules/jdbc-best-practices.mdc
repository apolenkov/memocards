---
alwaysApply: true
autoFix: true
version: "2.1.0"
---

# JDBC - Spring Data JDBC + PostgreSQL + Java 21

## STACK
Spring Data JDBC (NOT JPA/Hibernate!) | JdbcTemplate | PostgreSQL | Records

## ARCHITECTURE
- Adapter: `*JdbcAdapter implements *Repository`
- Aggregates (NO lazy loading)
- Immutability: Records for DTOs
- Layers: adapter/dto/sql/exception/model

## ADAPTER PATTERN

- @Profile({"dev","prod","test"}) + @Repository
- Static final RowMapper (thread-safe)
- Constructor injection with JdbcTemplate
- Implements domain repository interface

## CRITICAL RULES [OK]

**Structure**:
- Static final RowMapper (thread-safe)
- Constructor injection (validate null)
- Private toModel() conversion
- SLF4J logging

**SQL**:
- Text Blocks (Java 21)
- Parameterized queries (?)
- Separate *SqlQueries class
- PostgreSQL RETURNING id

**DTOs**:
- Records (immutable)
- **Builder for 5+ params** (readability, self-documenting)
- **Static factory for 2-4 params** (forNew*, forExisting*)
- Nested records for groups

**Exceptions**:
- Catch DataAccessException
- Wrap in domain (*Persistence, *Retrieval)
- Context in error msg
- Optional<T> for single results

**PostgreSQL**:
- RETURNING id (NOT LASTVAL())
- ON CONFLICT (upsert)
- JSONB, arrays, text blocks

**N+1 Prevention**:
- Fetch aggregates with JOIN in single query
- Use batch operations for collections (batchUpdate)
- Profile queries with EXPLAIN ANALYZE
- Monitor query count per request (should be constant, not O(n))

**Validation Layers:**
```
UI (Binder: required, format, length)
  ↓
Service (business: uniqueness, authorization, state transitions)
  ↓
DTO compact constructor (technical: null, blank, positive IDs)
  ↓
Repository (NO validation, assumes valid data)
```
- Exceptions: IllegalArgumentException (DTO), Business exceptions (Service)

## ANTIPATTERNS [BAD]
1. SQL injection → always parameterized (?)
2. Instance RowMapper → static final
3. SQL in methods → *SqlQueries class
4. Raw exceptions → domain exceptions
5. No validation → validate first
6. String concat → text blocks
7. LASTVAL() → RETURNING id
8. @Autowired fields → constructor
9. **N+1 queries** → JOIN or batch operations
10. **Missing @Transactional** → connection leak, no auto-rollback
11. **Validation in Repository** → should be in Service/DTO

## CHECKLIST
- [ ] @Profile + @Repository
- [ ] Static final RowMapper
- [ ] Constructor injection
- [ ] SQL in *SqlQueries
- [ ] Text blocks
- [ ] Parameterized (?)
- [ ] DTO records with technical validation
- [ ] Domain exceptions
- [ ] Input validation in correct layer
- [ ] Optional<T> returns
- [ ] @Transactional on Service (NOT Repository)
- [ ] N+1 prevention (JOIN or batch)
- [ ] Profile queries (EXPLAIN ANALYZE)

## BUILDER vs STATIC FACTORY

- **2-4 params** → Static factory (`forNew*()`, `forExisting*()`)
- **5+ params** → Builder (readability, self-documenting)
- Similar types → Builder; Different types → Factory

## JAVA 21
Text blocks | Records | getFirst() | Pattern matching
