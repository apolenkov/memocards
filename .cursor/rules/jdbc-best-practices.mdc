---
alwaysApply: true
autoFix: true
version: "2.0.0"
---

# JDBC - Spring Data JDBC + PostgreSQL + Java 21

## STACK
Spring Data JDBC (NOT JPA/Hibernate!) | JdbcTemplate | PostgreSQL | Records

## ARCHITECTURE
- Adapter: `*JdbcAdapter implements *Repository`
- Aggregates (NO lazy loading)
- Immutability: Records for DTOs
- Layers: adapter/dto/sql/exception/model

## ADAPTER PATTERN

- @Profile({"dev","prod","test"}) + @Repository
- Static final RowMapper (thread-safe)
- Constructor injection with JdbcTemplate
- Implements domain repository interface

## CRITICAL RULES [OK]

**Structure**:
- Static final RowMapper (thread-safe)
- Constructor injection (validate null)
- Private toModel() conversion
- SLF4J logging

**SQL**:
- Text Blocks (Java 21)
- Parameterized queries (?)
- Separate *SqlQueries class
- PostgreSQL RETURNING id

**DTOs**:
- Records (immutable)
- Compact constructor validation
- **Builder for 5+ params** (readability, self-documenting)
- **Static factory for 2-4 params** (forNew*, forExisting*)
- Nested records for groups

**Exceptions**:
- Catch DataAccessException
- Wrap in domain (*Persistence, *Retrieval)
- Context in error msg
- Optional<T> for single results

**PostgreSQL**:
- RETURNING id (NOT LASTVAL())
- ON CONFLICT (upsert)
- JSONB, arrays, text blocks

**Validation**:
- Input checks before queries
- IllegalArgumentException
- ID >0, non-null/empty strings

## ANTIPATTERNS [BAD]
1. SQL injection → always parameterized (?)
2. Instance RowMapper → static final
3. SQL in methods → *SqlQueries class
4. Raw exceptions → domain exceptions
5. No validation → validate first
6. String concat → text blocks
7. LASTVAL() → RETURNING id
8. @Autowired fields → constructor

## CHECKLIST
- [ ] @Profile + @Repository
- [ ] Static final RowMapper
- [ ] Constructor injection
- [ ] SQL in *SqlQueries
- [ ] Text blocks
- [ ] Parameterized (?)
- [ ] DTO records
- [ ] Domain exceptions
- [ ] Input validation
- [ ] Optional<T> returns

## BUILDER vs STATIC FACTORY

**Use Builder when [OK]:**
- **5+ parameters** (improves readability)
- **Similar types** (easy to mix up: `long duration, long delay`)
- **Optional parameters** (partial initialization)
- **Self-documenting code** preferred

```java
// ✅ 7 params - Builder is better!
SessionStatsDto.builder()
    .deckId(deckId)
    .viewed(totalViewed)
    .correct(correct)
    .hard(hard)
    .sessionDurationMs(sessionDuration.toMillis())
    .totalAnswerDelayMs(totalAnswerDelayMs)
    .knownCardIdsDelta(knownCardIdsDelta)
    .build()
```

**Use Static Factory when [OK]:**
- **2-4 parameters** (compact, clear)
- **Different types** (hard to confuse)
- **All required** (no optionals)

```java
// ✅ 3 params - static factory is fine
UserDto.forNew("email@example.com", "John Doe", "hashedPassword")
UserDto.forExisting(1L, "email@example.com", "John Doe")
```

**Guideline**:
- 2-3 params → static factory `of()` or `forNew*()` / `forExisting*()`
- 4 params → your choice (consider similarity of types)
- **5+ params → Builder** (readability wins!)

## JAVA 21
Text blocks | Records | getFirst() | Pattern matching
