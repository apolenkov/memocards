---
# =============================================================================
# ROLE: docker
# Docker Engine and Docker Compose v2 installation
# =============================================================================

- name: Remove old Docker versions if present
  ansible.builtin.apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
  tags: [docker, install]

- name: Install Docker dependencies
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: true
  tags: [docker, install]

- name: Create directory for Docker GPG key
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
  tags: [docker, install]

- name: Add Docker GPG key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /etc/apt/keyrings/docker.gpg
    state: present
  tags: [docker, install]

- name: Get system architecture
  ansible.builtin.command: dpkg --print-architecture
  register: docker_system_arch
  changed_when: false
  tags: [docker, install]

- name: Get Ubuntu codename
  ansible.builtin.command: lsb_release -cs
  register: docker_ubuntu_codename
  changed_when: false
  tags: [docker, install]

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: >-
      deb [arch={{ docker_system_arch.stdout }} signed-by=/etc/apt/keyrings/docker.gpg]
      https://download.docker.com/linux/ubuntu {{ docker_ubuntu_codename.stdout }} stable
    state: present
    filename: docker
    update_cache: true
  tags: [docker, install]

- name: Install Docker Engine and plugins
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  tags: [docker, install]

- name: Configure Docker daemon
  ansible.builtin.copy:
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "live-restore": true,
        "userland-proxy": false,
        "default-ulimits": {
          "nofile": {
            "Name": "nofile",
            "Hard": 64000,
            "Soft": 64000
          }
        }
      }
    dest: /etc/docker/daemon.json
    mode: "0644"
  notify: Restart docker
  tags: [docker, config]

- name: Start and enable Docker service
  ansible.builtin.systemd:
    name: docker
    state: started
    enabled: true
  tags: [docker, service]

- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: true
  tags: [docker, config]

- name: Wait for Docker to be ready
  ansible.builtin.command: docker info
  register: docker_docker_info
  retries: 5
  delay: 3
  until: docker_docker_info.rc == 0
  changed_when: false
  tags: [docker, service]

- name: Install pip
  ansible.builtin.apt:
    name:
      - python3-pip
    state: present
  tags: [docker, ghcr]

- name: Install Python dependencies for Docker module
  ansible.builtin.pip:
    name:
      - requests
      - docker
    state: present
  tags: [docker, ghcr]

- name: Login to GitHub Container Registry
  community.docker.docker_login:
    registry: ghcr.io
    username: "{{ github_actor }}"
    password: "{{ vault_github_token }}"
    reauthorize: true
  when: vault_github_token is defined and vault_github_token != ""
  tags: [docker, ghcr]

- name: Verify Docker installation
  ansible.builtin.command: docker --version
  register: docker_version_output
  changed_when: false
  tags: [docker, verify]

- name: Verify Docker Compose installation
  ansible.builtin.command: docker compose version
  register: docker_compose_version_output
  changed_when: false
  tags: [docker, verify]

- name: Create Docker cleanup script
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      # Docker cleanup script - remove unused data
      # Logs to syslog and /var/log/docker-cleanup.log

      LOG_FILE="/var/log/docker-cleanup.log"

      echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting Docker cleanup" >> "$LOG_FILE"

      # Remove dangling images (untagged)
      docker image prune -f >> "$LOG_FILE" 2>&1

      # Remove stopped containers older than 24h
      docker container prune -f --filter "until=24h" >> "$LOG_FILE" 2>&1

      # Remove unused networks
      docker network prune -f >> "$LOG_FILE" 2>&1

      # Remove build cache older than 7 days (keep recent for faster rebuilds)
      docker builder prune -f --filter "until=168h" >> "$LOG_FILE" 2>&1

      echo "$(date '+%Y-%m-%d %H:%M:%S') - Docker cleanup completed" >> "$LOG_FILE"
    dest: /usr/local/bin/docker-cleanup.sh
    mode: "0755"
  tags: [docker, cleanup]

- name: Create weekly Docker cleanup cron job
  ansible.builtin.cron:
    name: "Docker cleanup - remove unused data"
    minute: "0"
    hour: "3"
    weekday: "0"
    job: "/usr/local/bin/docker-cleanup.sh"
    user: root
  tags: [docker, cleanup]

# Network creation removed - docker-compose.yml creates the network automatically
# The network will be created when docker-compose.yml is first started

- name: Display Docker role completion
  ansible.builtin.debug:
    msg: |
      âœ… Docker role completed:
      - Docker Engine: {{ docker_version_output.stdout }}
      - Docker Compose: {{ docker_compose_version_output.stdout }}
      - Docker service: running and enabled
      - User {{ ansible_user }} added to docker group
      - GHCR login: {{ 'configured' if (vault_github_token is defined and
        vault_github_token != '') else 'skipped (no token)' }}
      - Network: will be created by docker-compose.yml on first run
      - Cleanup: weekly cron job (Sundays at 3:00 AM)
  tags: [docker]
