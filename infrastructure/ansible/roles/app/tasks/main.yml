---
# =============================================================================
# ROLE: app
# Memocards application deployment via Docker Compose
# =============================================================================

- name: Copy Docker Compose configuration (application)
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../../../docker-compose.yml"
    dest: "{{ app_deploy_path }}/docker-compose.yml"
    mode: "0644"
  tags: [app, config]

- name: Generate production environment file from template
  ansible.builtin.template:
    src: env.prod.j2
    dest: "{{ app_deploy_path }}/.env"
    mode: "0600"
    backup: true
  tags: [app, config]

- name: Pull application image from GHCR
  community.docker.docker_image_pull:
    name: "{{ app_image }}"
  register: app_image_pull_result
  tags: [app, deploy]

- name: Deploy application services
  ansible.builtin.command:
    cmd: docker compose -p memocards-prod -f docker-compose.yml up -d --pull always --remove-orphans
    chdir: "{{ app_deploy_path }}"
  register: app_compose_result
  changed_when: >-
    'Created' in app_compose_result.stdout or
    'Started' in app_compose_result.stdout or
    'Recreated' in app_compose_result.stdout or
    'Pulled' in app_compose_result.stdout
  tags: [app, deploy]
  # NOTE: Recreates containers if config/images changed

- name: Wait for PostgreSQL to be healthy
  ansible.builtin.shell: |
    STATUS=$(docker inspect --format='{% raw %}{{.State.Health.Status}}{% endraw %}' \
      memocards-postgres-prod 2>/dev/null || echo "not_found")
    [ "$STATUS" = "healthy" ]
  register: app_postgres_health
  retries: 30
  delay: 2
  until: app_postgres_health.rc == 0
  changed_when: false
  tags: [app, health]

- name: Wait for application healthcheck to pass
  ansible.builtin.shell: |
    for i in {1..120}; do
      status=$(docker inspect --format='{% raw %}{{.State.Health.Status}}{% endraw %}' memocards-app-prod 2>/dev/null || echo "missing")
      if [ "$status" = "healthy" ]; then exit 0; fi
      sleep 2
    done
    exit 1
  args:
    executable: /bin/bash
  register: app_health_check
  failed_when: false
  changed_when: false
  tags: [app, health]

- name: Clean up old application images (keep last 3)
  ansible.builtin.shell: |
    set -o pipefail
    # Keep last N images, remove older ones
    docker images 'ghcr.io/apolenkov/memocards' --format '{% raw %}{{.ID}}|{{.Tag}}|{{.CreatedAt}}{% endraw %}' | \
    sort -t'|' -k3 -r | tail -n +4 | cut -d'|' -f1 | xargs -r docker rmi -f || true
  args:
    executable: /bin/bash
  register: image_cleanup_result
  changed_when: image_cleanup_result.stdout != ""
  failed_when: false
  tags: [app, cleanup]

- name: Prune unused Docker resources (periodic cleanup, prevents disk accumulation)
  ansible.builtin.command:
    cmd: docker system prune -f --filter "until=168h"
  register: docker_prune_result
  changed_when: "'reclaimed' in docker_prune_result.stdout.lower()"
  failed_when: false
  tags: [app, cleanup]
  # NOTE: Removes unused containers/networks/images older than 7 days
  # Volumes and running containers are NOT affected

# Backup removed - not needed for MVP
# Monitoring removed - using Docker restart policy (restart: unless-stopped)

- name: Get container status
  ansible.builtin.command: docker compose -p memocards-prod -f {{ app_deploy_path }}/docker-compose.yml ps
  register: app_container_status
  changed_when: false
  tags: [app, verify]

- name: Display application deployment status
  ansible.builtin.debug:
    msg: |
      ✅ Application role completed:

      📦 Deployment:
      - Application image: {{ app_image }}
      - Health check: {%
        if app_health_check is defined and app_health_check.rc | default(1) == 0
        %}PASSED ✅{% elif app_health_check is defined %}FAILED ❌{% else %}SKIPPED ⏭️{% endif %}
      - Database: PostgreSQL (containerized)
      - Deploy path: {{ app_deploy_path }}

      🔧 Management:
      - Auto-restart: Enabled (Docker restart policy)
      - Logs: {{ app_deploy_path }}/logs

      🌐 Access:
      - URL: https://{{ domain }}
      - Health: http://{{ domain }}/actuator/health

      📋 Useful commands:
      - View logs: docker logs -f memocards-app-prod
      - Restart app: docker compose -p memocards-prod -f {{ app_deploy_path }}/docker-compose.yml restart app
      - Check status: docker compose -p memocards-prod -f {{ app_deploy_path }}/docker-compose.yml ps
  tags: [app]
