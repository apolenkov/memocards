---
# =============================================================================
# PLAYBOOK: setup.yml
# Complete Memocards infrastructure setup on VPS
# =============================================================================
#
# This playbook performs initial installation of the entire infrastructure:
# - Basic system configuration (common)
# - Docker installation (docker)
# - Nginx installation and SSL configuration (nginx)
# - Application deployment (app)
#
# Usage:
#   ansible-playbook -i ../inventory/hosts.yml setup.yml --ask-vault-pass
#
# Or with dry run (check without changes):
#   ansible-playbook -i ../inventory/hosts.yml setup.yml --ask-vault-pass --check
# =============================================================================

- name: Deploy Memocards Infrastructure on VPS
  hosts: vps
  become: true
  gather_facts: true

  vars_files:
    - ../inventory/group_vars/all.yml
    - ../secrets.yml

  pre_tasks:
    - name: Display deployment information
      ansible.builtin.debug:
        msg: |
          ╔════════════════════════════════════════════════════════════╗
          ║     Memocards Infrastructure Deployment Starting...        ║
          ╚════════════════════════════════════════════════════════════╝

          🎯 Target: {{ inventory_hostname }}
          🐧 Starting deployment...
          ⏱️  This will take approximately 10-15 minutes...
      tags: [always]
      when: ansible_facts is defined

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      tags: [always]

  roles:
    - role: common
      tags: [common, setup]

    - role: docker
      tags: [docker, setup]

    - role: nginx
      tags: [nginx, setup]

    - role: app
      tags: [app, setup]

    - role: monitoring
      tags: [monitoring, setup]

  post_tasks:
    - name: Verify all containers are running
      ansible.builtin.shell: |
        set -o pipefail
        docker ps --format "table {{ '{{' }}.Names{{ '}}' }}\t{{ '{{' }}.Status{{ '}}' }}" | grep -E "(NAMES|memocards)" || echo "No containers found"
      args:
        executable: /bin/bash
      register: container_status
      changed_when: false
      failed_when: false
      tags: [always, verify]

    - name: Ensure application is up (start if missing or not healthy)
      ansible.builtin.shell: |
        set -e
        status=$(docker inspect --format='{{ '{{' }}.State.Health.Status{{ '}}' }}' memocards-app-prod 2>/dev/null || echo "missing")
        if [ "$status" != "healthy" ]; then
          docker compose -p memocards-prod -f docker-compose.yml up -d --pull always app
        fi
        exit 0
      args:
        executable: /bin/bash
      changed_when: false
      failed_when: false
      tags: [always, verify]

    - name: Wait for application container health=healthy
      ansible.builtin.shell: |
        for i in {1..120}; do
          status=$(docker inspect --format='{{ '{{' }}.State.Health.Status{{ '}}' }}' memocards-app-prod 2>/dev/null || echo missing)
          if [ "$status" = "healthy" ]; then exit 0; fi
          sleep 2
        done
        exit 1
      args:
        executable: /bin/bash
      register: app_container_health
      changed_when: false
      failed_when: false
      tags: [always, verify]

    - name: Probe application HTTP health (non-fatal until 200)
      ansible.builtin.uri:
        url: "http://localhost:{{ app_port }}/actuator/health"
        method: GET
        status_code: [200, 202, 204, 302, 404, 502, 503]
      retries: 60
      delay: 2
      register: setup_app_health_http
      until: setup_app_health_http.status == 200
      failed_when: false
      changed_when: false
      tags: [always, verify]

    - name: Wait for public routes to respond (/, /grafana, /prometheus, /traefik)
      ansible.builtin.shell: |
        for i in {1..60}; do
          root=$(curl -ks -o /dev/null -w '%{http_code}' https://{{ domain }}/)
          gf=$(curl -ks -o /dev/null -w '%{http_code}' https://{{ domain }}/grafana/)
          pr=$(curl -ks -o /dev/null -w '%{http_code}' https://{{ domain }}/prometheus/)
          tr=$(curl -ks -o /dev/null -w '%{http_code}' https://{{ domain }}/traefik/)
          # Expect: root=200, grafana=200/302, prom/traefik=401 (basic auth)
          if [ "$root" = "200" ] && { [ "$gf" = "200" ] || [ "$gf" = "302" ]; } && [ "$pr" = "401" ] && [ "$tr" = "401" ]; then
            echo "OK: root=$root grafana=$gf prom=$pr traefik=$tr"; exit 0;
          fi
          sleep 2
        done
        echo "Last: root=$root grafana=$gf prom=$pr traefik=$tr"; exit 1
      args:
        executable: /bin/bash
      register: public_routes_check
      changed_when: false
      failed_when: public_routes_check.rc != 0
      tags: [always, verify]

    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          ╔════════════════════════════════════════════════════════════╗
          ║    🎉 Memocards Infrastructure Deployed Successfully!     ║
          ╚════════════════════════════════════════════════════════════╝

          📦 Components:
          ✅ System configured (firewall, swap, directories)
          ✅ Docker Engine installed and running
          ✅ Nginx installed with SSL (hybrid architecture: Nginx → Traefik → Services)
          ✅ Infrastructure deployed (Traefik, Prometheus, Loki, Promtail, Grafana)
          ✅ Application deployed and healthy
          ✅ PostgreSQL database running
          ✅ Auto-restart enabled (Docker restart policy)

          🌐 Access:
          - Application: https://{{ domain }}
          - Grafana: https://{{ domain }}/grafana
          - Prometheus: https://{{ domain }}/prometheus
          - Traefik Dashboard: https://{{ domain }}/traefik
          - Health: https://{{ domain }}/actuator/health

          📋 Next Steps:
          1. Test application: curl -I https://{{ domain }}
          2. Test Grafana: curl -I https://{{ domain }}/grafana
          3. Check logs: docker logs -f memocards-app-prod
          4. For updates: ansible-playbook -i ../inventory/hosts.yml deploy.yml --ask-vault-pass

          📚 Documentation: ../README.md
          🔧 Architecture: Hybrid (Nginx SSL + Traefik routing)

          🐳 Container Status:
          {{ container_status.stdout }}
      tags: [always]

    - name: Save deployment timestamp
      ansible.builtin.copy:
        content: |
          Deployment completed: {{ ansible_date_time.iso8601 }}
          Deployed by: {{ ansible_user_id }}@{{ ansible_hostname }}
          Version: {{ app_image }}
        dest: "{{ app_deploy_path }}/.deployment_info"
        mode: "0644"
      tags: [always]
